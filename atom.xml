<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lzzZ</title>
  
  
  <link href="https://leaningzzz.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://leaningzzz.github.io/blog/"/>
  <updated>2023-11-02T03:18:58.894Z</updated>
  <id>https://leaningzzz.github.io/blog/</id>
  
  <author>
    <name>lzzZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>28.找出字符串中第一个匹配项的下标</title>
    <link href="https://leaningzzz.github.io/blog/2023/11/02/leetcode/28-%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%B9%E9%85%8D%E9%A1%B9%E7%9A%84%E4%B8%8B%E6%A0%87/"/>
    <id>https://leaningzzz.github.io/blog/2023/11/02/leetcode/28-%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%B9%E9%85%8D%E9%A1%B9%E7%9A%84%E4%B8%8B%E6%A0%87/</id>
    <published>2023-11-02T03:18:35.000Z</published>
    <updated>2023-11-02T03:18:58.894Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=28 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [28] 找出字符串中第一个匹配项的下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">haystack</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">needle</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// var strStr = function (haystack, needle) &#123;</span></span><br><span class="line"><span class="comment">//   return haystack.indexOf(needle)</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="keyword">var</span> strStr = <span class="keyword">function</span> (<span class="params">haystack, needle</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> needleLength = needle.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; haystack.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (haystack.<span class="title function_">slice</span>(i, needleLength + i) === needle) &#123;</span><br><span class="line">      <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span></span><br><span class="line"><span class="keyword">let</span> haystack = <span class="string">&quot;a&quot;</span>, needle = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">strStr</span>(haystack, needle))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="字符串" scheme="https://leaningzzz.github.io/blog/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>459.重复的子字符串</title>
    <link href="https://leaningzzz.github.io/blog/2023/11/02/leetcode/459-%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://leaningzzz.github.io/blog/2023/11/02/leetcode/459-%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-11-02T03:17:35.000Z</published>
    <updated>2023-11-02T03:18:13.088Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=459 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [459] 重复的子字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 最多由长度为1的s.length个字符串重复的来</span></span><br><span class="line"><span class="comment">// 最少由长度为s.length/2个字符重复的来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> repeatedSubstringPattern = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// s.length % i !== 0  不能被整除，说明不是由长度为i的字符重复的来</span></span><br><span class="line">    <span class="comment">// 用subStr对字符串进行分割</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="property">length</span> % i === <span class="number">0</span> &amp;&amp; s.<span class="title function_">split</span>(s.<span class="title function_">substring</span>(<span class="number">0</span>, i)).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;aaa&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">repeatedSubstringPattern</span>(s))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="字符串" scheme="https://leaningzzz.github.io/blog/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>344.反转字符串</title>
    <link href="https://leaningzzz.github.io/blog/2023/11/01/leetcode/344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://leaningzzz.github.io/blog/2023/11/01/leetcode/344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-11-01T08:27:12.000Z</published>
    <updated>2023-11-01T08:27:37.027Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=344 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [344] 反转字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[]</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 数组api</span></span><br><span class="line"><span class="comment">// var reverseString = function (s) &#123;</span></span><br><span class="line"><span class="comment">//   return s.reverse()</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// 二分</span></span><br><span class="line"><span class="keyword">const</span> reverseString = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> midIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(s.<span class="property">length</span> / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; midIndex; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = s[i]</span><br><span class="line">    s[i] = s[s.<span class="property">length</span> - <span class="number">1</span> - i]</span><br><span class="line">    s[s.<span class="property">length</span> - <span class="number">1</span> - i] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = [<span class="string">&quot;h&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;o&quot;</span>]</span><br><span class="line"><span class="title function_">reverseString</span>(s)</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="字符串" scheme="https://leaningzzz.github.io/blog/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>541.反转字符串-ii</title>
    <link href="https://leaningzzz.github.io/blog/2023/11/01/leetcode/541-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-ii/"/>
    <id>https://leaningzzz.github.io/blog/2023/11/01/leetcode/541-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-ii/</id>
    <published>2023-11-01T08:26:20.000Z</published>
    <updated>2023-11-01T08:26:55.319Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=541 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [541] 反转字符串 II</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 每k个分一组</span></span><br><span class="line"><span class="comment">// 组里第一个反转 第二个不反转 第三个反转...</span></span><br><span class="line"><span class="comment">// 时间 292ms 击败 5.25%使用 JavaScript 的用户</span></span><br><span class="line"><span class="comment">// 内存 48.22MB 击败 5.03%使用 JavaScript 的用户</span></span><br><span class="line"><span class="comment">// var reverse = function (s) &#123;</span></span><br><span class="line"><span class="comment">//   let res = &#x27;&#x27;</span></span><br><span class="line"><span class="comment">//   for (let i = s.length - 1; i &gt;= 0; i--) &#123;</span></span><br><span class="line"><span class="comment">//     res += s[i]</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   return res</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// const reverseStr = function (s, k) &#123;</span></span><br><span class="line"><span class="comment">//   // 一共能分length组</span></span><br><span class="line"><span class="comment">//   const length = Math.ceil(s.length / k)</span></span><br><span class="line"><span class="comment">//   let res = &#x27;&#x27;, idx = 0</span></span><br><span class="line"><span class="comment">//   console.log(length)</span></span><br><span class="line"><span class="comment">//   for (let i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(i)</span></span><br><span class="line"><span class="comment">//     if (i % 2 === 0) &#123;</span></span><br><span class="line"><span class="comment">//       res += reverse(s.slice(idx, idx + k))</span></span><br><span class="line"><span class="comment">//     &#125; else &#123;</span></span><br><span class="line"><span class="comment">//       res += s.slice(idx, idx + k)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     idx += k</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   return res</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> reverseStr = <span class="keyword">function</span> (<span class="params">s, k</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = s.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>, res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i += k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      <span class="comment">// 从第 i 到 第 k 个反转</span></span><br><span class="line">      res.<span class="title function_">push</span>(...arr.<span class="title function_">slice</span>(i, i + k).<span class="title function_">reverse</span>())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(...arr.<span class="title function_">slice</span>(i, i + k))</span><br><span class="line">    &#125;</span><br><span class="line">    flag = !flag</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&quot;abcdefg&quot;</span>, k = <span class="number">2</span></span><br><span class="line"><span class="title function_">reverseStr</span>(s, k)</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="字符串" scheme="https://leaningzzz.github.io/blog/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>151.反转字符串中的单词</title>
    <link href="https://leaningzzz.github.io/blog/2023/11/01/leetcode/151-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
    <id>https://leaningzzz.github.io/blog/2023/11/01/leetcode/151-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/</id>
    <published>2023-11-01T08:25:05.000Z</published>
    <updated>2023-11-01T08:26:06.046Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=151 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [151] 反转字符串中的单词</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="regexp">/\s+/</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;example   good a&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reverseWords</span>(s))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="字符串" scheme="https://leaningzzz.github.io/blog/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>发布-订阅</title>
    <link href="https://leaningzzz.github.io/blog/2023/04/07/interview/%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85/"/>
    <id>https://leaningzzz.github.io/blog/2023/04/07/interview/%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85/</id>
    <published>2023-04-07T12:38:17.000Z</published>
    <updated>2023-04-08T13:02:14.603Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventHub</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;</span><br><span class="line">      <span class="comment">// &#x27;aa&#x27;: [fn1,fn2]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">event, fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 注册事件</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[event] = [...<span class="variable language_">this</span>.<span class="property">events</span>[event], fn]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">event, args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[event] &amp;&amp; <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">element</span>(args)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">off</span>(<span class="params">event, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      <span class="comment">// 全部移除</span></span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">events</span>[event]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> curIndex = <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">indexOf</span>(fn)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(curIndex, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (curIndex === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">splice</span>(curIndex, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">events</span>[event]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> eventhub = <span class="keyword">new</span> <span class="title class_">EventHub</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">aa</span> = (<span class="params"></span>) =&gt; &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">456</span>) &#125;</span><br><span class="line">eventhub.<span class="title function_">on</span>(<span class="string">&#x27;aa&#x27;</span>, <span class="function">(<span class="params">aa</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(aa) &#125;)</span><br><span class="line">eventhub.<span class="title function_">on</span>(<span class="string">&#x27;aa&#x27;</span>, aa)</span><br><span class="line">eventhub.<span class="title function_">emit</span>(<span class="string">&#x27;aa&#x27;</span>, <span class="number">123</span>)</span><br><span class="line">eventhub.<span class="title function_">off</span>(<span class="string">&#x27;aa&#x27;</span>, aa)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------&#x27;</span>)</span><br><span class="line">eventhub.<span class="title function_">emit</span>(<span class="string">&#x27;aa&#x27;</span>, <span class="number">123</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="手写题" scheme="https://leaningzzz.github.io/blog/categories/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>add累加函数</title>
    <link href="https://leaningzzz.github.io/blog/2023/04/07/interview/add/"/>
    <id>https://leaningzzz.github.io/blog/2023/04/07/interview/add/</id>
    <published>2023-04-07T12:37:29.000Z</published>
    <updated>2023-05-30T03:02:33.334Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add(1)(3) === 4</span></span><br><span class="line"><span class="comment">// add(1)(2)(3)(4) === 10</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="keyword">function</span> (<span class="params">num, sum</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!sum) sum = <span class="number">0</span></span><br><span class="line">  sum += num</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">add</span>(b, sum)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)())</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">curry</span> = (<span class="params">fn, ...args</span>) =&gt; args.<span class="property">length</span> &gt;= fn.<span class="property">length</span> ? <span class="title function_">fn</span>(...args) : <span class="function">(<span class="params">..._args</span>) =&gt;</span> <span class="title function_">curry</span>(fn, ...args, ..._args);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add1</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> add = <span class="title function_">curry</span>(add1);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="手写题" scheme="https://leaningzzz.github.io/blog/categories/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>react实现</title>
    <link href="https://leaningzzz.github.io/blog/2023/03/05/react/react%E5%AE%9E%E7%8E%B0/"/>
    <id>https://leaningzzz.github.io/blog/2023/03/05/react/react%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-03-05T02:00:20.000Z</published>
    <updated>2023-04-08T13:01:59.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><ol><li><p>同层级元素进行diff，如果一个dom节点在前后两次更新中跨越了层级，那么不会进行复用。</p></li><li><p>两个不同类型的元素会产生不同的树，如果元素由div变为p，则会销毁div及其子孙节点，并新建p及其子孙节点。</p></li><li><p>可以通过key来指定稳定的dom</p></li></ol><h2 id="状态更新"><a href="#状态更新" class="headerlink" title="状态更新"></a>状态更新</h2><h2 id="Concurrent-mode"><a href="#Concurrent-mode" class="headerlink" title="Concurrent mode"></a>Concurrent mode</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;diff&quot;&gt;&lt;a href=&quot;#diff&quot; class=&quot;headerlink&quot; title=&quot;diff&quot;&gt;&lt;/a&gt;diff&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;同层级元素进行diff，如果一个dom节点在前后两次更新中跨越了层级，那么不会进行复用。&lt;/p&gt;
&lt;/li</summary>
      
    
    
    
    <category term="React" scheme="https://leaningzzz.github.io/blog/categories/React/"/>
    
    
    <category term="React" scheme="https://leaningzzz.github.io/blog/tags/React/"/>
    
    <category term="原理" scheme="https://leaningzzz.github.io/blog/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>react理念</title>
    <link href="https://leaningzzz.github.io/blog/2023/03/04/react/react%E7%90%86%E5%BF%B5/"/>
    <id>https://leaningzzz.github.io/blog/2023/03/04/react/react%E7%90%86%E5%BF%B5/</id>
    <published>2023-03-04T02:07:04.000Z</published>
    <updated>2023-03-04T03:28:50.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React理念"><a href="#React理念" class="headerlink" title="React理念"></a>React理念</h2><p>react<br>快速 响应</p><p>ui &#x3D; render(data) 单向数据推动视图更新</p><p>卡顿：</p><ol><li>CPU瓶颈导致卡顿：大量的js计算操作</li><li>IO卡顿，网络请求导致卡顿</li></ol><h3 id="CUP卡顿"><a href="#CUP卡顿" class="headerlink" title="CUP卡顿"></a>CUP卡顿</h3><p>js执行 -&gt; ui渲染 -&gt; js执行<br>long task任务 js执行过长导致卡顿。</p><p>解决： 同步长时间任务 转为 异步可中断（concurrent mode 异步渲染）<br>在浏览器每一帧的时间中，预留一些时间给JS线程，React利用这部分时间更新组件（在源码中，预留的初始时间是5ms）。<br>当预留的时间不够用时，React将线程控制权交还给浏览器使其有时间渲染UI，React则等待下一帧时间到来继续被中断的工作。</p><h3 id="IO卡顿"><a href="#IO卡顿" class="headerlink" title="IO卡顿"></a>IO卡顿</h3><p>loading<br>suspense</p><h2 id="老React架构（15）"><a href="#老React架构（15）" class="headerlink" title="老React架构（15）"></a>老React架构（15）</h2><p>React15架构可以分为两层：</p><ul><li>Reconciler（协调器）—— 负责找出变化的组件</li><li>Renderer（渲染器）—— 负责将变化的组件渲染到页面上</li></ul><h3 id="Reconlier"><a href="#Reconlier" class="headerlink" title="Reconlier"></a>Reconlier</h3><p>当通过this.setData、this.forceUpdate、render触发更新时：</p><ol><li>jsx -&gt; js -&gt; vdom  jsx通过react.createElement转为vdom</li><li>vdom与上次的vdom进行对比</li><li>通过对比找到变化的dom（diff）</li><li>通知renderer将变化dom进行渲染</li></ol><h3 id="renderer"><a href="#renderer" class="headerlink" title="renderer"></a>renderer</h3><p>在每次更新发生时，renderer收到reconciler的通知，将变化更新到当前的宿主环境。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>reconciler递归更新子组件<br>由于是递归执行，因此递归开始后便无法停止或中断，当层级较深时，递归超过16.6ms 用户便会感到卡顿。</p><h2 id="新的React架构（16）"><a href="#新的React架构（16）" class="headerlink" title="新的React架构（16）"></a>新的React架构（16）</h2><p>React16的架构可以分为三层：</p><ul><li>Scheduler（调度器）：调度任务优先级，高优先级任务进入Reconciler。</li><li>Reconciler（协调器）：负责找出变化组件。</li><li>Renderer（渲染器）：负责将变化组件更新到视图。</li></ul><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><p>requestIdleCallback 浏览器原生支持，兼容性差；<br>React自己实现Scheduler库。用于调度协调器和渲染器。</p><h3 id="Reconciler"><a href="#Reconciler" class="headerlink" title="Reconciler"></a>Reconciler</h3><ol><li>与15相比，将递归调用变成了可中断的循环。每次循环都会调用shouldYield判断是否有剩余时间。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@noinline</span> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">workLoopConcurrent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Perform work until Scheduler asks us to yield</span></span><br><span class="line">  <span class="keyword">while</span> (workInProgress !== <span class="literal">null</span> &amp;&amp; !<span class="title function_">shouldYield</span>()) &#123;</span><br><span class="line">    workInProgress = <span class="title function_">performUnitOfWork</span>(workInProgress);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Reconciler与Renderer不再是交替工作。当Scheduler将任务交给Reconciler后，Reconciler会为变化的虚拟DOM打上代表增&#x2F;删&#x2F;更新的标记。</li><li>整个Scheduler与Reconciler的工作都在内存中进行。只有当所有组件都完成Reconciler的工作，才会统一交给Renderer。</li></ol><h3 id="Renderer"><a href="#Renderer" class="headerlink" title="Renderer"></a>Renderer</h3><p>根据Reconciler的打标进行视图更新。</p><h2 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h2><p>React内部实现的一套状态更新机制。支持任务不同优先级，可中断与恢复，并且恢复后可以复用之前的中间状态。</p><h3 id="Fiber含义"><a href="#Fiber含义" class="headerlink" title="Fiber含义"></a>Fiber含义</h3><ol><li>作为架构：之前React15的Reconciler采用递归的方式执行，数据保存在递归调用栈中，所以被称为栈调和；React16的Reconciler基于Fiber节点实现，被称为Fiber调和。</li><li>作为静态的数据结构来说，每个Fiber节点对应一个ReactElement,保存了该组件的类型（函数组件、类组件、原生组件…）、对应的Dom节点信息等。</li><li>作为动态的工作单元，Fiber节点保存了本次更新中该组件改变的状态、要执行的工作（被插入、被删除、被更新…）</li></ol><h3 id="Fiber的结构"><a href="#Fiber的结构" class="headerlink" title="Fiber的结构"></a>Fiber的结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 作为静态数据结构的属性</span></span><br><span class="line">  tag,</span><br><span class="line">  key,</span><br><span class="line">  elementType,</span><br><span class="line">  type,</span><br><span class="line">  stateNode,</span><br><span class="line">  <span class="comment">// 用于连接其他fiber节点形成fiber树</span></span><br><span class="line">  <span class="keyword">return</span>, <span class="comment">// 父</span></span><br><span class="line">  child,  <span class="comment">// 子</span></span><br><span class="line">  sibling,  <span class="comment">// 右边第一个兄弟节点</span></span><br><span class="line">  index,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指向该Fiber在另一次更新时对应的fiber</span></span><br><span class="line">  alternate, <span class="comment">// current fiber、workInProgress fiber</span></span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fiber双缓存"><a href="#Fiber双缓存" class="headerlink" title="Fiber双缓存"></a>Fiber双缓存</h3><p><a href="https://react.iamkasong.com/process/doubleBuffer.html#%E4%BB%80%E4%B9%88%E6%98%AF-%E5%8F%8C%E7%BC%93%E5%AD%98">https://react.iamkasong.com/process/doubleBuffer.html#%E4%BB%80%E4%B9%88%E6%98%AF-%E5%8F%8C%E7%BC%93%E5%AD%98</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;React理念&quot;&gt;&lt;a href=&quot;#React理念&quot; class=&quot;headerlink&quot; title=&quot;React理念&quot;&gt;&lt;/a&gt;React理念&lt;/h2&gt;&lt;p&gt;react&lt;br&gt;快速 响应&lt;/p&gt;
&lt;p&gt;ui &amp;#x3D; render(data) 单向数据推</summary>
      
    
    
    
    <category term="React" scheme="https://leaningzzz.github.io/blog/categories/React/"/>
    
    
    <category term="React" scheme="https://leaningzzz.github.io/blog/tags/React/"/>
    
    <category term="原理" scheme="https://leaningzzz.github.io/blog/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>1487.保证文件名唯一</title>
    <link href="https://leaningzzz.github.io/blog/2023/03/03/leetcode/1487-%E4%BF%9D%E8%AF%81%E6%96%87%E4%BB%B6%E5%90%8D%E5%94%AF%E4%B8%80/"/>
    <id>https://leaningzzz.github.io/blog/2023/03/03/leetcode/1487-%E4%BF%9D%E8%AF%81%E6%96%87%E4%BB%B6%E5%90%8D%E5%94%AF%E4%B8%80/</id>
    <published>2023-03-03T03:11:32.000Z</published>
    <updated>2023-03-03T03:13:48.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/making-file-names-unique/">https://leetcode.cn/problems/making-file-names-unique/</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=1487 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [1487] 保证文件名唯一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">names</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getFolderNames = <span class="keyword">function</span> (<span class="params">names</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; names.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!set.<span class="title function_">has</span>(names[i])) &#123;</span><br><span class="line">      set.<span class="title function_">add</span>(names[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line">      <span class="keyword">let</span> str = <span class="string">`<span class="subst">$&#123;names[i]&#125;</span>(<span class="subst">$&#123;count&#125;</span>)`</span></span><br><span class="line">      <span class="keyword">while</span> (set.<span class="title function_">has</span>(str)) &#123;</span><br><span class="line">        count++</span><br><span class="line">        str = <span class="string">`<span class="subst">$&#123;names[i]&#125;</span>(<span class="subst">$&#123;count&#125;</span>)`</span></span><br><span class="line">      &#125;</span><br><span class="line">      set.<span class="title function_">add</span>(str)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...set]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const names = [&quot;wano&quot;, &quot;wano&quot;, &quot;wano&quot;, &quot;wano&quot;]</span></span><br><span class="line"><span class="comment">// const names = [&quot;onepiece&quot;, &quot;onepiece(1)&quot;, &quot;onepiece(2)&quot;, &quot;onepiece(3)&quot;, &quot;onepiece&quot;]</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;kaido&quot;</span>, <span class="string">&quot;kaido(1)&quot;</span>, <span class="string">&quot;kaido&quot;</span>, <span class="string">&quot;kaido(1)&quot;</span>]</span><br><span class="line"><span class="title function_">getFolderNames</span>(names)</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/making-file-names-unique/&quot;&gt;https</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="medium" scheme="https://leaningzzz.github.io/blog/tags/medium/"/>
    
  </entry>
  
  <entry>
    <title>2373.矩阵中的局部最大值</title>
    <link href="https://leaningzzz.github.io/blog/2023/03/01/leetcode/2373-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://leaningzzz.github.io/blog/2023/03/01/leetcode/2373-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2023-03-01T05:56:12.000Z</published>
    <updated>2023-03-01T06:02:52.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/largest-local-values-in-a-matrix/">https://leetcode.cn/problems/largest-local-values-in-a-matrix/</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>对一个二位数组<br>遍历了各元素<br>找出以该元素为左顶点的最大3*3矩阵元素<br>返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2373 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2373] 矩阵中的局部最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">grid</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> largestLocal = <span class="keyword">function</span> (<span class="params">grid</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getMax</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> max = arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)[<span class="number">0</span>] - <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid.<span class="property">length</span> - <span class="number">2</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> subGrid = [grid[i].<span class="title function_">slice</span>(j, j + <span class="number">3</span>), grid[i + <span class="number">1</span>].<span class="title function_">slice</span>(j, j + <span class="number">3</span>), grid[i + <span class="number">2</span>].<span class="title function_">slice</span>(j, j + <span class="number">3</span>)]</span><br><span class="line">      temp.<span class="title function_">push</span>(<span class="title function_">getMax</span>(subGrid))</span><br><span class="line">    &#125;</span><br><span class="line">    result.<span class="title function_">push</span>(temp)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>省略了排序后取最大值的过程<br>直接在9个元素中找最大值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> largestLocal = <span class="keyword">function</span> (<span class="params">grid</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getMax</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> max = arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)[<span class="number">0</span>] - <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid.<span class="property">length</span> - <span class="number">2</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(</span><br><span class="line">        grid[i][j], grid[i][j + <span class="number">1</span>], grid[i][j + <span class="number">2</span>],</span><br><span class="line">        grid[i + <span class="number">1</span>][j], grid[i + <span class="number">1</span>][j + <span class="number">1</span>], grid[i + <span class="number">1</span>][j + <span class="number">2</span>],</span><br><span class="line">        grid[i + <span class="number">2</span>][j], grid[i + <span class="number">2</span>][j + <span class="number">1</span>], grid[i + <span class="number">2</span>][j + <span class="number">2</span>],</span><br><span class="line">      )</span><br><span class="line">      temp.<span class="title function_">push</span>(max)</span><br><span class="line">    &#125;</span><br><span class="line">    result.<span class="title function_">push</span>(temp)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/largest-local-values-in-a-matrix</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="easy" scheme="https://leaningzzz.github.io/blog/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>2363.合并相似的物品</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/28/leetcode/2363-%E5%90%88%E5%B9%B6%E7%9B%B8%E4%BC%BC%E7%9A%84%E7%89%A9%E5%93%81/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/28/leetcode/2363-%E5%90%88%E5%B9%B6%E7%9B%B8%E4%BC%BC%E7%9A%84%E7%89%A9%E5%93%81/</id>
    <published>2023-02-28T02:58:22.000Z</published>
    <updated>2023-02-28T02:59:41.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/merge-similar-items">https://leetcode.cn/problems/merge-similar-items</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2363 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2363] 合并相似的物品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">items1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">items2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeSimilarItems = <span class="keyword">function</span> (<span class="params">items1, items2</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">  items1.<span class="title function_">concat</span>(items2).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[value, weight]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[value]) &#123;</span><br><span class="line">      obj[value] = weight</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[value] = obj[value] + weight</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> [<span class="title class_">Number</span>(key), obj[key]])</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> items1 = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">8</span>]], items2 = [[<span class="number">3</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mergeSimilarItems</span>(items1, items2))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/merge-similar-items&quot;&gt;https://lee</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="easy" scheme="https://leaningzzz.github.io/blog/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>2357.使数组中所有元素都等于零</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/24/leetcode/2357-%E4%BD%BF%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E9%83%BD%E7%AD%89%E4%BA%8E%E9%9B%B6/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/24/leetcode/2357-%E4%BD%BF%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E9%83%BD%E7%AD%89%E4%BA%8E%E9%9B%B6/</id>
    <published>2023-02-24T06:42:52.000Z</published>
    <updated>2023-02-24T06:45:36.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/make-array-zero-by-subtracting-equal-amounts/">https://leetcode.cn/problems/make-array-zero-by-subtracting-equal-amounts/</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>数组去重排序<br>做一次遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2357 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2357] 使数组中所有元素都等于零</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minimumOperations = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  nums = [...<span class="keyword">new</span> <span class="title class_">Set</span>(nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b))]</span><br><span class="line">  <span class="keyword">if</span> (!nums.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> length = nums.<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>, sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (index &lt; length &amp;&amp; nums[length - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[length - <span class="number">1</span>] - sum &lt;= nums[index] - sum) &#123;</span><br><span class="line">      <span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sum = sum + nums[index]</span><br><span class="line">    &#125;</span><br><span class="line">    index++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">minimumOperations</span>(nums), <span class="string">&#x27;result&#x27;</span>)</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure><h2 id="最优"><a href="#最优" class="headerlink" title="最优"></a>最优</h2><p>次数 &#x3D; sum中非0元素个数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minimumOperations = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Set</span>(nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item)).<span class="property">size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/make-array-zero-by-subtracting-e</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="easy" scheme="https://leaningzzz.github.io/blog/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>防抖、节流</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/23/interview/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/23/interview/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81/</id>
    <published>2023-02-23T07:23:18.000Z</published>
    <updated>2023-02-23T07:41:47.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>避免高频操作</p><ul><li>防抖：触发高频事件后n秒内函数只会执行一次,如果n秒内高频事件再次被触发,则重新计算时间。</li><li>节流：间隔n秒触发一次。</li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><ol><li>设置一个定时器</li><li>如果n秒内被再次触发，则清除定时器，重新设置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">debounce</span> = (<span class="params">fn, delay</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(context, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;,delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><ol><li>设置flag</li><li>flag一段时间后为true，执行函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn,delay</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(context,<span class="variable language_">arguments</span>)</span><br><span class="line">        flag = <span class="literal">true</span></span><br><span class="line">      &#125;, delay)</span><br><span class="line">      flag = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;避免高频操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防抖：触发高频事件后n秒内函数只会执行一次,如果n秒内高频事件再次被触发,则重新计算时间。&lt;/li&gt;</summary>
      
    
    
    
    <category term="手写题" scheme="https://leaningzzz.github.io/blog/categories/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/22/basic/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/22/basic/%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
    <published>2023-02-22T06:54:01.000Z</published>
    <updated>2023-02-22T07:38:18.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie、localStorage、sessionStorage的区别"><a href="#cookie、localStorage、sessionStorage的区别" class="headerlink" title="cookie、localStorage、sessionStorage的区别"></a>cookie、localStorage、sessionStorage的区别</h1><ul><li>相同点：都是客户端用来数据持久化的</li><li>不同点：<ul><li>大小不同。cookie约4KB，sessionStorage和localStorage的存储比cookie大得多，可以达到5M+。</li><li>cookie设置过期时间，在过期时间之内一直有效；localStorage不手动清理一直有效；sessionStorage只在当前回话有效，关闭浏览器后会清空。</li><li>cookie的数据会随着请求发到服务端，localStorage、sessionStorage的数据存在本地。</li></ul></li></ul><h1 id="从输入URL到页面加载的全过程"><a href="#从输入URL到页面加载的全过程" class="headerlink" title="从输入URL到页面加载的全过程"></a>从输入URL到页面加载的全过程</h1><ol><li>浏览器输入url并回车。</li><li>查找缓存，看浏览器缓存中是否有该页面，如果有的话显示页面内容，没有则往下进行DNS解析。<ol><li>浏览器缓存</li><li>操作系统缓存</li><li>路由器缓存</li><li>ISP缓存（？）</li></ol></li><li>DNS解析。向DNS服务器发送请求，获取该url域名所对应的id地址。（UDP连接）。</li><li>建立TCP连接：通过解析到的ip地址和默认80端口，建立TCP连接。</li><li>发起HTTP请求：浏览器发起读取文件的HTTP请求，，该请求报文作为TCP三次握手的第三次数据发送给服务器。</li><li>服务端相应结果，并返回对应html。</li><li>关闭TCP连接（四次挥手）。</li><li>浏览器渲染，客户端解析HTML的内容并渲染出来。<ol><li>构建DOM树。</li><li>构建CSS tree。</li><li>DOM树和CSS树结合，构建出渲染树（render tree）。</li><li>布局</li><li>绘制</li></ol></li></ol><h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li>浏览器每次发送请求时，都会先在浏览器缓存中查找该请求的结果及缓存标识。</li><li>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中。</li></ol><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是Expires和Cache-Control，其中Cache-Control优先级比Expires高。</p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>Http 1.0控制缓存的字段，标识缓存过期时间，即再次发起请求时，若客户端的时间小于Expires的时间，则使用该缓存。</p><p>现在默认使用Http 1.1，Expires被cache-control取代。原因在于客户端时间不准确。<br>当Expires和cache-control同时存在时，expires优先级小于cache-control</p><h3 id="Cache-control"><a href="#Cache-control" class="headerlink" title="Cache-control"></a>Cache-control</h3><p>http 1.1中用于判断缓存的字段，主要取值有：</p><ul><li>public：所有的内容都将被缓存（客户端 + 服务端）</li><li>private：所有的内容只有客户端可以被缓存（默认值）</li><li>no-cache：客户端缓存内容，但是是否使用缓存需要经过协商缓存验证决定</li><li>no-store：所有内容都不会被缓存</li><li>max-age：缓存失效时间（xxx秒后缓存失效）</li></ul><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>缓存失效后，客户端携带缓存标识向服务端发送请求，服务端根据缓存标识决定是否使用缓存，主要有两种情况：</p><ol><li>缓存生效，返回304</li><li>协商缓存失效，返回200</li></ol><p>协商缓存的标识在响应头中返回给浏览器。协商缓存的控制字段主要有：Last-Modified&#x2F;If-Modified-Since和Etag&#x2F;If-None-Match，其中Etag&#x2F;If-None-Match的优先级高于Last-Modified&#x2F;If-Modified-Since</p><h3 id="Last-Modified-x2F-If-Modified-Since"><a href="#Last-Modified-x2F-If-Modified-Since" class="headerlink" title="Last-Modified &#x2F; If-Modified-Since"></a>Last-Modified &#x2F; If-Modified-Since</h3><ul><li>last–modified存在于响应头中，是服务端响应请求时，该资源在服务端最后被修改的时间。</li><li>if-modified-since存在于请求头中，为服务端发起请求时，携带上一次请求返回的last-modified值。服务端收到请求后发现请求头含有If-Modified-Since字段，则会根据if-modified-since的值于服务端资源最后被修改时间进行对比。若资源被修改时间大于if-modified-since，则重新返回资源，状态码为200，否则返回304，代表资源未更新，可以使用缓存。</li></ul><h3 id="Etag-x2F-If-None-Match"><a href="#Etag-x2F-If-None-Match" class="headerlink" title="Etag &#x2F; If-None-Match"></a>Etag &#x2F; If-None-Match</h3><ul><li>Etag为服务端返还给客户端的一个资源唯一标识</li><li>if-none-match是客户端再次发起请求时，携带的上一次返回的etag值。服务端收到请求后，若发现存在if-none-match字段，则会根据该字段的值与服务器的Etag进行对比，若一致，则返回304，代表资源未更新；若不一致则重新返回资源文件，状态码为200。</li></ul><h1 id="重排重绘分别是什么？"><a href="#重排重绘分别是什么？" class="headerlink" title="重排重绘分别是什么？"></a>重排重绘分别是什么？</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>重绘：repaint，当元素样式的改变不影响布局时，浏览器重新对元素进行更新的过程叫做重绘。<br>重排：reflow，当页面元素的尺寸、结构或某些特定属性发生改变时，浏览器重新渲染部分或全部文档的过程叫做重排，也称为回流。</p><p><strong>重绘不一定重排，重排一定重绘</strong></p><h2 id="如何触发重排、重绘？"><a href="#如何触发重排、重绘？" class="headerlink" title="如何触发重排、重绘？"></a>如何触发重排、重绘？</h2><h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><p>元素样式改变触发。例如： background等属性改变</p><h3 id="重排"><a href="#重排" class="headerlink" title="重排"></a>重排</h3><ol><li>增加或删除可见的dom元素，导致文档排列变化</li><li>元素位置发生改变</li><li>元素尺寸发生改变</li><li>浏览器窗口发生改变</li><li>页面初始化</li></ol><h2 id="如何避免重排、重绘？"><a href="#如何避免重排、重绘？" class="headerlink" title="如何避免重排、重绘？"></a>如何避免重排、重绘？</h2><ol><li>合并视图操作，不要一条一条的修改dom样式。可以先定义好css的className，随后将className添加到元素上。</li><li>对具有复杂动画的元素使用绝对定位，使其脱离文档流。避免引起父元素及后续元素频繁回流。</li><li>避免频繁操作dom。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cookie、localStorage、sessionStorage的区别&quot;&gt;&lt;a href=&quot;#cookie、localStorage、sessionStorage的区别&quot; class=&quot;headerlink&quot; title=&quot;cookie、localStorag</summary>
      
    
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/categories/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    <category term="面试资料" scheme="https://leaningzzz.github.io/blog/tags/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/"/>
    
    <category term="浏览器" scheme="https://leaningzzz.github.io/blog/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="缓存" scheme="https://leaningzzz.github.io/blog/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>50.pow-x-n</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/21/leetcode/50-pow-x-n/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/21/leetcode/50-pow-x-n/</id>
    <published>2023-02-21T04:38:51.000Z</published>
    <updated>2023-02-22T02:43:23.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/powx-n/">https://leetcode.cn/problems/powx-n/</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>直接计算</li><li>分治</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="直接计算"><a href="#直接计算" class="headerlink" title="直接计算"></a>直接计算</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> myPow = <span class="keyword">function</span>(<span class="params">x, n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x**n</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> myPow = <span class="keyword">function</span> (<span class="params">x, n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / <span class="title function_">myPow</span>(x, -n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 奇数</span></span><br><span class="line">  <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="title function_">myPow</span>(x, n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 偶数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">myPow</span>(x * x, n / <span class="number">2</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/powx-n/&quot;&gt;https://leetcode.cn/pro</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>2347.最好的扑克手牌</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/20/leetcode/2347-%E6%9C%80%E5%A5%BD%E7%9A%84%E6%89%91%E5%85%8B%E6%89%8B%E7%89%8C/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/20/leetcode/2347-%E6%9C%80%E5%A5%BD%E7%9A%84%E6%89%91%E5%85%8B%E6%89%8B%E7%89%8C/</id>
    <published>2023-02-20T03:24:27.000Z</published>
    <updated>2023-02-20T03:26:36.330Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 题目</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;https://leetcode.cn/problems/best-poker-hand&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 思路</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">通过set判断同花和高牌</span></span><br><span class="line"><span class="string">通过一次循环来判断三对和两对</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2347 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2347] 最好的扑克手牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">ranks</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[]</span>&#125; <span class="variable">suits</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> bestHand = <span class="keyword">function</span> (<span class="params">ranks, suits</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ([...<span class="keyword">new</span> <span class="title class_">Set</span>(suits)].<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Flush&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ranks.<span class="property">length</span> === [...<span class="keyword">new</span> <span class="title class_">Set</span>(ranks)].<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;High Card&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> sorted = ranks.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="keyword">let</span> isPair = <span class="literal">false</span>, isThreeOfAKind = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sorted.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sorted[i] === sorted[i + <span class="number">1</span>] &amp;&amp; sorted[i + <span class="number">1</span>] === sorted[i + <span class="number">2</span>]) &#123;</span><br><span class="line">      isThreeOfAKind = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sorted[i] === sorted[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      isPair = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isThreeOfAKind) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Three of a Kind&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isPair) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Pair&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// const ranks = [13, 2, 3, 1, 9], suits = [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;]</span></span><br><span class="line"><span class="comment">// const ranks = [4, 4, 2, 4, 4], suits = [&quot;d&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">const</span> ranks = [<span class="number">10</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>], suits = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bestHand</span>(ranks, suits))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用JS实现带并发的异步任务调度器</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/16/interview/%E4%BD%BF%E7%94%A8JS%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%B9%B6%E5%8F%91%E7%9A%84%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/16/interview/%E4%BD%BF%E7%94%A8JS%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%B9%B6%E5%8F%91%E7%9A%84%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/</id>
    <published>2023-02-16T06:27:15.000Z</published>
    <updated>2023-02-16T06:54:17.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>实现一个带并发限制的异步调度器 Scheduler，保证同时运行的任务最多有N个。完善下面代码中的 Scheduler 类，使得以下程序能正确输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span> &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">promiseCreator</span>) &#123; ... &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">timeout</span> = (<span class="params">time</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scheduler = <span class="keyword">new</span> <span class="title class_">Scheduler</span>(n)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTask</span> = (<span class="params">time, order</span>) =&gt; &#123;</span><br><span class="line">  scheduler.<span class="title function_">add</span>(<span class="function">() =&gt;</span> <span class="title function_">timeout</span>(time)).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(order))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">1000</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">500</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">300</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">400</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印顺序是：2 3 1 4</span></span><br></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><ul><li>执行add方法时，判断当前并发数。<ul><li>并发数大于limit，通过await进行阻塞。</li><li>并发数小于limit，执行当前任务，并判断是否存在阻塞任务。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">max</span> = n</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">promises</span> = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">add</span>(<span class="params">promiseCreator</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> &gt;= <span class="variable language_">this</span>.<span class="property">max</span>) &#123;</span><br><span class="line">      <span class="comment">// 当前达到上限</span></span><br><span class="line">      <span class="comment">// 该promise应该阻塞</span></span><br><span class="line">      <span class="comment">// 将阻塞该promise的resolve方法存储在列表中，用于解除阻塞状态</span></span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">promises</span>.<span class="title function_">push</span>(resolve)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行当前promise</span></span><br><span class="line">    <span class="comment">// 记录result</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">promiseCreator</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>--</span><br><span class="line">    <span class="comment">// 当前promise执行完毕</span></span><br><span class="line">    <span class="comment">// 判断列表中是否存在阻塞的任务</span></span><br><span class="line">    <span class="comment">// 存在阻塞任务，则拿出前面的任务，调用resolve解除阻塞状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">promises</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">promises</span>.<span class="title function_">shift</span>()()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">timeout</span> = (<span class="params">time</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scheduler = <span class="keyword">new</span> <span class="title class_">Scheduler</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTask</span> = (<span class="params">time, order</span>) =&gt; &#123;</span><br><span class="line">  scheduler.<span class="title function_">add</span>(<span class="function">() =&gt;</span> <span class="title function_">timeout</span>(time)).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(order));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">1000</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">500</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">300</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">400</span>, <span class="string">&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;实现一个带并发限制的异步调度器 Scheduler，保证同时运行的任务最多有N个。完善下面代码中的 Scheduler 类，使得以下程序能正</summary>
      
    
    
    
    <category term="手写题" scheme="https://leaningzzz.github.io/blog/categories/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    
    
    <category term="promise" scheme="https://leaningzzz.github.io/blog/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>promise相关api及其实现</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/16/interview/promise%E7%9B%B8%E5%85%B3api%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/16/interview/promise%E7%9B%B8%E5%85%B3api%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-02-16T06:07:12.000Z</published>
    <updated>2023-02-16T06:09:19.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h1><ol><li>接收⼀个Promise数组，数组中如有⾮Promise项，则此项当做成功</li><li>如果所有Promise都成功，则返回成功结果数组</li><li>如果有⼀个Promise失败，则返回这个失败结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">index, value</span>) =&gt; &#123;</span><br><span class="line">      result[index] = value</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span> (count === promises.<span class="property">length</span>) <span class="title function_">resolve</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(index, res)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addData</span>(index, promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race"></a>promise.race</h1><ol><li>接收promise数组，如果有非promise的值，返回成功</li><li>返回最快得到结果的promise</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function"><span class="params">promise</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="promise-allSettled"><a href="#promise-allSettled" class="headerlink" title="promise.allSettled"></a>promise.allSettled</h1><ol><li>接受promise数组，如果有非promise值，返回成功</li><li>保存所有promise结果(成功+失败)，返回数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">allSettled</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">status, value, i</span>) =&gt; &#123;</span><br><span class="line">      res[i] = &#123;</span><br><span class="line">        status,</span><br><span class="line">        value</span><br><span class="line">      &#125;</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(<span class="string">&#x27;fulfilled&#x27;</span>, res, i)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(<span class="string">&#x27;rejected&#x27;</span>, err, i)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addData</span>(<span class="string">&#x27;fulfilled&#x27;</span>, promise, i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="promise-any"><a href="#promise-any" class="headerlink" title="promise.any"></a>promise.any</h1><ol><li>接收promise数组，若有非promise直接返回成功</li><li>有一个promise成功，返回成功</li><li>全部失败报错</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(val)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          count++</span><br><span class="line">          <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(<span class="string">&#x27;All promises were rejected&#x27;</span></span><br><span class="line">            ))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;promise-all&quot;&gt;&lt;a href=&quot;#promise-all&quot; class=&quot;headerlink&quot; title=&quot;promise.all&quot;&gt;&lt;/a&gt;promise.all&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;接收⼀个Promise数组，数组中如有⾮Promise项</summary>
      
    
    
    
    <category term="手写题" scheme="https://leaningzzz.github.io/blog/categories/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    
    
    <category term="promise" scheme="https://leaningzzz.github.io/blog/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>2341.数组能形成多少数对</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/16/leetcode/2341-%E6%95%B0%E7%BB%84%E8%83%BD%E5%BD%A2%E6%88%90%E5%A4%9A%E5%B0%91%E6%95%B0%E5%AF%B9/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/16/leetcode/2341-%E6%95%B0%E7%BB%84%E8%83%BD%E5%BD%A2%E6%88%90%E5%A4%9A%E5%B0%91%E6%95%B0%E5%AF%B9/</id>
    <published>2023-02-16T03:10:32.000Z</published>
    <updated>2023-02-16T03:13:53.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.cn/problems/maximum-number-of-pairs-in-array/">https://leetcode.cn/problems/maximum-number-of-pairs-in-array/</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>排序数组</li><li>从0开始遍历，对比[i]和[i+1]是否相等</li><li>如果相等，pairs ++ ,i +&#x3D; 2</li><li>如果不相等，i++</li><li>返回 [pairs, nums.length-2*pairs]</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2341 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2341] 数组能形成多少数对</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfPairs = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sorted = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, pairs = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; sorted.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sorted[i] === sorted[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      pairs++</span><br><span class="line">      i += <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pairs)</span><br><span class="line">  <span class="keyword">return</span> [pairs, sorted.<span class="property">length</span> - pairs * <span class="number">2</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">// const nums = [1, 1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numberOfPairs</span>(nums))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-number-of-pairs-</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
</feed>

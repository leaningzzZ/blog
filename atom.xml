<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lzzZ</title>
  
  
  <link href="https://leaningzzz.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://leaningzzz.github.io/blog/"/>
  <updated>2023-02-28T02:59:41.184Z</updated>
  <id>https://leaningzzz.github.io/blog/</id>
  
  <author>
    <name>lzzZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2363.合并相似的物品</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/28/leetcode/2363-%E5%90%88%E5%B9%B6%E7%9B%B8%E4%BC%BC%E7%9A%84%E7%89%A9%E5%93%81/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/28/leetcode/2363-%E5%90%88%E5%B9%B6%E7%9B%B8%E4%BC%BC%E7%9A%84%E7%89%A9%E5%93%81/</id>
    <published>2023-02-28T02:58:22.000Z</published>
    <updated>2023-02-28T02:59:41.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/merge-similar-items">https://leetcode.cn/problems/merge-similar-items</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2363 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2363] 合并相似的物品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">items1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">items2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeSimilarItems = <span class="keyword">function</span> (<span class="params">items1, items2</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">  items1.<span class="title function_">concat</span>(items2).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[value, weight]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[value]) &#123;</span><br><span class="line">      obj[value] = weight</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[value] = obj[value] + weight</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> [<span class="title class_">Number</span>(key), obj[key]])</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> items1 = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">8</span>]], items2 = [[<span class="number">3</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mergeSimilarItems</span>(items1, items2))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/merge-similar-items&quot;&gt;https://lee</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="easy" scheme="https://leaningzzz.github.io/blog/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>2357.使数组中所有元素都等于零</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/24/leetcode/2357-%E4%BD%BF%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E9%83%BD%E7%AD%89%E4%BA%8E%E9%9B%B6/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/24/leetcode/2357-%E4%BD%BF%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E9%83%BD%E7%AD%89%E4%BA%8E%E9%9B%B6/</id>
    <published>2023-02-24T06:42:52.000Z</published>
    <updated>2023-02-24T06:45:36.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/make-array-zero-by-subtracting-equal-amounts/">https://leetcode.cn/problems/make-array-zero-by-subtracting-equal-amounts/</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>数组去重排序<br>做一次遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2357 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2357] 使数组中所有元素都等于零</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minimumOperations = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  nums = [...<span class="keyword">new</span> <span class="title class_">Set</span>(nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b))]</span><br><span class="line">  <span class="keyword">if</span> (!nums.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> length = nums.<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>, sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (index &lt; length &amp;&amp; nums[length - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[length - <span class="number">1</span>] - sum &lt;= nums[index] - sum) &#123;</span><br><span class="line">      <span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sum = sum + nums[index]</span><br><span class="line">    &#125;</span><br><span class="line">    index++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">minimumOperations</span>(nums), <span class="string">&#x27;result&#x27;</span>)</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure><h2 id="最优"><a href="#最优" class="headerlink" title="最优"></a>最优</h2><p>次数 &#x3D; sum中非0元素个数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minimumOperations = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Set</span>(nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item)).<span class="property">size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/make-array-zero-by-subtracting-e</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="easy" scheme="https://leaningzzz.github.io/blog/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>防抖、节流</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/23/interview/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/23/interview/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81/</id>
    <published>2023-02-23T07:23:18.000Z</published>
    <updated>2023-02-23T07:41:47.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>避免高频操作</p><ul><li>防抖：触发高频事件后n秒内函数只会执行一次,如果n秒内高频事件再次被触发,则重新计算时间。</li><li>节流：间隔n秒触发一次。</li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><ol><li>设置一个定时器</li><li>如果n秒内被再次触发，则清除定时器，重新设置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">debounce</span> = (<span class="params">fn, delay</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(context, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;,delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><ol><li>设置flag</li><li>flag一段时间后为true，执行函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn,delay</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(context,<span class="variable language_">arguments</span>)</span><br><span class="line">        flag = <span class="literal">true</span></span><br><span class="line">      &#125;, delay)</span><br><span class="line">      flag = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;避免高频操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防抖：触发高频事件后n秒内函数只会执行一次,如果n秒内高频事件再次被触发,则重新计算时间。&lt;/li&gt;</summary>
      
    
    
    
    <category term="手写题" scheme="https://leaningzzz.github.io/blog/categories/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/22/basic/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/22/basic/%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
    <published>2023-02-22T06:54:01.000Z</published>
    <updated>2023-02-22T07:38:18.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie、localStorage、sessionStorage的区别"><a href="#cookie、localStorage、sessionStorage的区别" class="headerlink" title="cookie、localStorage、sessionStorage的区别"></a>cookie、localStorage、sessionStorage的区别</h1><ul><li>相同点：都是客户端用来数据持久化的</li><li>不同点：<ul><li>大小不同。cookie约4KB，sessionStorage和localStorage的存储比cookie大得多，可以达到5M+。</li><li>cookie设置过期时间，在过期时间之内一直有效；localStorage不手动清理一直有效；sessionStorage只在当前回话有效，关闭浏览器后会清空。</li><li>cookie的数据会随着请求发到服务端，localStorage、sessionStorage的数据存在本地。</li></ul></li></ul><h1 id="从输入URL到页面加载的全过程"><a href="#从输入URL到页面加载的全过程" class="headerlink" title="从输入URL到页面加载的全过程"></a>从输入URL到页面加载的全过程</h1><ol><li>浏览器输入url并回车。</li><li>查找缓存，看浏览器缓存中是否有该页面，如果有的话显示页面内容，没有则往下进行DNS解析。<ol><li>浏览器缓存</li><li>操作系统缓存</li><li>路由器缓存</li><li>ISP缓存（？）</li></ol></li><li>DNS解析。向DNS服务器发送请求，获取该url域名所对应的id地址。（UDP连接）。</li><li>建立TCP连接：通过解析到的ip地址和默认80端口，建立TCP连接。</li><li>发起HTTP请求：浏览器发起读取文件的HTTP请求，，该请求报文作为TCP三次握手的第三次数据发送给服务器。</li><li>服务端相应结果，并返回对应html。</li><li>关闭TCP连接（四次挥手）。</li><li>浏览器渲染，客户端解析HTML的内容并渲染出来。<ol><li>构建DOM树。</li><li>构建CSS tree。</li><li>DOM树和CSS树结合，构建出渲染树（render tree）。</li><li>布局</li><li>绘制</li></ol></li></ol><h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li>浏览器每次发送请求时，都会先在浏览器缓存中查找该请求的结果及缓存标识。</li><li>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中。</li></ol><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是Expires和Cache-Control，其中Cache-Control优先级比Expires高。</p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>Http 1.0控制缓存的字段，标识缓存过期时间，即再次发起请求时，若客户端的时间小于Expires的时间，则使用该缓存。</p><p>现在默认使用Http 1.1，Expires被cache-control取代。原因在于客户端时间不准确。<br>当Expires和cache-control同时存在时，expires优先级小于cache-control</p><h3 id="Cache-control"><a href="#Cache-control" class="headerlink" title="Cache-control"></a>Cache-control</h3><p>http 1.1中用于判断缓存的字段，主要取值有：</p><ul><li>public：所有的内容都将被缓存（客户端 + 服务端）</li><li>private：所有的内容只有客户端可以被缓存（默认值）</li><li>no-cache：客户端缓存内容，但是是否使用缓存需要经过协商缓存验证决定</li><li>no-store：所有内容都不会被缓存</li><li>max-age：缓存失效时间（xxx秒后缓存失效）</li></ul><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>缓存失效后，客户端携带缓存标识向服务端发送请求，服务端根据缓存标识决定是否使用缓存，主要有两种情况：</p><ol><li>缓存生效，返回304</li><li>协商缓存失效，返回200</li></ol><p>协商缓存的标识在响应头中返回给浏览器。协商缓存的控制字段主要有：Last-Modified&#x2F;If-Modified-Since和Etag&#x2F;If-None-Match，其中Etag&#x2F;If-None-Match的优先级高于Last-Modified&#x2F;If-Modified-Since</p><h3 id="Last-Modified-x2F-If-Modified-Since"><a href="#Last-Modified-x2F-If-Modified-Since" class="headerlink" title="Last-Modified &#x2F; If-Modified-Since"></a>Last-Modified &#x2F; If-Modified-Since</h3><ul><li>last–modified存在于响应头中，是服务端响应请求时，该资源在服务端最后被修改的时间。</li><li>if-modified-since存在于请求头中，为服务端发起请求时，携带上一次请求返回的last-modified值。服务端收到请求后发现请求头含有If-Modified-Since字段，则会根据if-modified-since的值于服务端资源最后被修改时间进行对比。若资源被修改时间大于if-modified-since，则重新返回资源，状态码为200，否则返回304，代表资源未更新，可以使用缓存。</li></ul><h3 id="Etag-x2F-If-None-Match"><a href="#Etag-x2F-If-None-Match" class="headerlink" title="Etag &#x2F; If-None-Match"></a>Etag &#x2F; If-None-Match</h3><ul><li>Etag为服务端返还给客户端的一个资源唯一标识</li><li>if-none-match是客户端再次发起请求时，携带的上一次返回的etag值。服务端收到请求后，若发现存在if-none-match字段，则会根据该字段的值与服务器的Etag进行对比，若一致，则返回304，代表资源未更新；若不一致则重新返回资源文件，状态码为200。</li></ul><h1 id="重排重绘分别是什么？"><a href="#重排重绘分别是什么？" class="headerlink" title="重排重绘分别是什么？"></a>重排重绘分别是什么？</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>重绘：repaint，当元素样式的改变不影响布局时，浏览器重新对元素进行更新的过程叫做重绘。<br>重排：reflow，当页面元素的尺寸、结构或某些特定属性发生改变时，浏览器重新渲染部分或全部文档的过程叫做重排，也称为回流。</p><p><strong>重绘不一定重排，重排一定重绘</strong></p><h2 id="如何触发重排、重绘？"><a href="#如何触发重排、重绘？" class="headerlink" title="如何触发重排、重绘？"></a>如何触发重排、重绘？</h2><h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><p>元素样式改变触发。例如： background等属性改变</p><h3 id="重排"><a href="#重排" class="headerlink" title="重排"></a>重排</h3><ol><li>增加或删除可见的dom元素，导致文档排列变化</li><li>元素位置发生改变</li><li>元素尺寸发生改变</li><li>浏览器窗口发生改变</li><li>页面初始化</li></ol><h2 id="如何避免重排、重绘？"><a href="#如何避免重排、重绘？" class="headerlink" title="如何避免重排、重绘？"></a>如何避免重排、重绘？</h2><ol><li>合并视图操作，不要一条一条的修改dom样式。可以先定义好css的className，随后将className添加到元素上。</li><li>对具有复杂动画的元素使用绝对定位，使其脱离文档流。避免引起父元素及后续元素频繁回流。</li><li>避免频繁操作dom。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cookie、localStorage、sessionStorage的区别&quot;&gt;&lt;a href=&quot;#cookie、localStorage、sessionStorage的区别&quot; class=&quot;headerlink&quot; title=&quot;cookie、localStorag</summary>
      
    
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/categories/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    <category term="面试资料" scheme="https://leaningzzz.github.io/blog/tags/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/"/>
    
    <category term="浏览器" scheme="https://leaningzzz.github.io/blog/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="缓存" scheme="https://leaningzzz.github.io/blog/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>50.pow-x-n</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/21/leetcode/50-pow-x-n/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/21/leetcode/50-pow-x-n/</id>
    <published>2023-02-21T04:38:51.000Z</published>
    <updated>2023-02-22T02:43:23.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/powx-n/">https://leetcode.cn/problems/powx-n/</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>直接计算</li><li>分治</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="直接计算"><a href="#直接计算" class="headerlink" title="直接计算"></a>直接计算</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> myPow = <span class="keyword">function</span>(<span class="params">x, n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x**n</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> myPow = <span class="keyword">function</span> (<span class="params">x, n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / <span class="title function_">myPow</span>(x, -n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 奇数</span></span><br><span class="line">  <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="title function_">myPow</span>(x, n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 偶数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">myPow</span>(x * x, n / <span class="number">2</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/powx-n/&quot;&gt;https://leetcode.cn/pro</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>2347.最好的扑克手牌</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/20/leetcode/2347-%E6%9C%80%E5%A5%BD%E7%9A%84%E6%89%91%E5%85%8B%E6%89%8B%E7%89%8C/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/20/leetcode/2347-%E6%9C%80%E5%A5%BD%E7%9A%84%E6%89%91%E5%85%8B%E6%89%8B%E7%89%8C/</id>
    <published>2023-02-20T03:24:27.000Z</published>
    <updated>2023-02-20T03:26:36.330Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 题目</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;https://leetcode.cn/problems/best-poker-hand&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 思路</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">通过set判断同花和高牌</span></span><br><span class="line"><span class="string">通过一次循环来判断三对和两对</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2347 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2347] 最好的扑克手牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">ranks</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[]</span>&#125; <span class="variable">suits</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> bestHand = <span class="keyword">function</span> (<span class="params">ranks, suits</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ([...<span class="keyword">new</span> <span class="title class_">Set</span>(suits)].<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Flush&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ranks.<span class="property">length</span> === [...<span class="keyword">new</span> <span class="title class_">Set</span>(ranks)].<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;High Card&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> sorted = ranks.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="keyword">let</span> isPair = <span class="literal">false</span>, isThreeOfAKind = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sorted.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sorted[i] === sorted[i + <span class="number">1</span>] &amp;&amp; sorted[i + <span class="number">1</span>] === sorted[i + <span class="number">2</span>]) &#123;</span><br><span class="line">      isThreeOfAKind = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sorted[i] === sorted[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      isPair = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isThreeOfAKind) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Three of a Kind&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isPair) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Pair&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// const ranks = [13, 2, 3, 1, 9], suits = [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;]</span></span><br><span class="line"><span class="comment">// const ranks = [4, 4, 2, 4, 4], suits = [&quot;d&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">const</span> ranks = [<span class="number">10</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>], suits = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bestHand</span>(ranks, suits))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用JS实现带并发的异步任务调度器</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/16/interview/%E4%BD%BF%E7%94%A8JS%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%B9%B6%E5%8F%91%E7%9A%84%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/16/interview/%E4%BD%BF%E7%94%A8JS%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%B9%B6%E5%8F%91%E7%9A%84%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/</id>
    <published>2023-02-16T06:27:15.000Z</published>
    <updated>2023-02-16T06:54:17.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>实现一个带并发限制的异步调度器 Scheduler，保证同时运行的任务最多有N个。完善下面代码中的 Scheduler 类，使得以下程序能正确输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span> &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">promiseCreator</span>) &#123; ... &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">timeout</span> = (<span class="params">time</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scheduler = <span class="keyword">new</span> <span class="title class_">Scheduler</span>(n)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTask</span> = (<span class="params">time, order</span>) =&gt; &#123;</span><br><span class="line">  scheduler.<span class="title function_">add</span>(<span class="function">() =&gt;</span> <span class="title function_">timeout</span>(time)).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(order))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">1000</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">500</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">300</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">400</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印顺序是：2 3 1 4</span></span><br></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><ul><li>执行add方法时，判断当前并发数。<ul><li>并发数大于limit，通过await进行阻塞。</li><li>并发数小于limit，执行当前任务，并判断是否存在阻塞任务。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">max</span> = n</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">promises</span> = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">add</span>(<span class="params">promiseCreator</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> &gt;= <span class="variable language_">this</span>.<span class="property">max</span>) &#123;</span><br><span class="line">      <span class="comment">// 当前达到上限</span></span><br><span class="line">      <span class="comment">// 该promise应该阻塞</span></span><br><span class="line">      <span class="comment">// 将阻塞该promise的resolve方法存储在列表中，用于解除阻塞状态</span></span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">promises</span>.<span class="title function_">push</span>(resolve)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行当前promise</span></span><br><span class="line">    <span class="comment">// 记录result</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">promiseCreator</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>--</span><br><span class="line">    <span class="comment">// 当前promise执行完毕</span></span><br><span class="line">    <span class="comment">// 判断列表中是否存在阻塞的任务</span></span><br><span class="line">    <span class="comment">// 存在阻塞任务，则拿出前面的任务，调用resolve解除阻塞状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">promises</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">promises</span>.<span class="title function_">shift</span>()()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">timeout</span> = (<span class="params">time</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scheduler = <span class="keyword">new</span> <span class="title class_">Scheduler</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTask</span> = (<span class="params">time, order</span>) =&gt; &#123;</span><br><span class="line">  scheduler.<span class="title function_">add</span>(<span class="function">() =&gt;</span> <span class="title function_">timeout</span>(time)).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(order));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">1000</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">500</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">300</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">400</span>, <span class="string">&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;实现一个带并发限制的异步调度器 Scheduler，保证同时运行的任务最多有N个。完善下面代码中的 Scheduler 类，使得以下程序能正</summary>
      
    
    
    
    <category term="手写题" scheme="https://leaningzzz.github.io/blog/categories/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    
    
    <category term="promise" scheme="https://leaningzzz.github.io/blog/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>promise相关api及其实现</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/16/interview/promise%E7%9B%B8%E5%85%B3api%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/16/interview/promise%E7%9B%B8%E5%85%B3api%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-02-16T06:07:12.000Z</published>
    <updated>2023-02-16T06:09:19.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h1><ol><li>接收⼀个Promise数组，数组中如有⾮Promise项，则此项当做成功</li><li>如果所有Promise都成功，则返回成功结果数组</li><li>如果有⼀个Promise失败，则返回这个失败结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">index, value</span>) =&gt; &#123;</span><br><span class="line">      result[index] = value</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span> (count === promises.<span class="property">length</span>) <span class="title function_">resolve</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(index, res)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addData</span>(index, promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race"></a>promise.race</h1><ol><li>接收promise数组，如果有非promise的值，返回成功</li><li>返回最快得到结果的promise</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function"><span class="params">promise</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="promise-allSettled"><a href="#promise-allSettled" class="headerlink" title="promise.allSettled"></a>promise.allSettled</h1><ol><li>接受promise数组，如果有非promise值，返回成功</li><li>保存所有promise结果(成功+失败)，返回数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">allSettled</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">status, value, i</span>) =&gt; &#123;</span><br><span class="line">      res[i] = &#123;</span><br><span class="line">        status,</span><br><span class="line">        value</span><br><span class="line">      &#125;</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(<span class="string">&#x27;fulfilled&#x27;</span>, res, i)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(<span class="string">&#x27;rejected&#x27;</span>, err, i)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addData</span>(<span class="string">&#x27;fulfilled&#x27;</span>, promise, i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="promise-any"><a href="#promise-any" class="headerlink" title="promise.any"></a>promise.any</h1><ol><li>接收promise数组，若有非promise直接返回成功</li><li>有一个promise成功，返回成功</li><li>全部失败报错</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(val)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          count++</span><br><span class="line">          <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(<span class="string">&#x27;All promises were rejected&#x27;</span></span><br><span class="line">            ))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;promise-all&quot;&gt;&lt;a href=&quot;#promise-all&quot; class=&quot;headerlink&quot; title=&quot;promise.all&quot;&gt;&lt;/a&gt;promise.all&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;接收⼀个Promise数组，数组中如有⾮Promise项</summary>
      
    
    
    
    <category term="手写题" scheme="https://leaningzzz.github.io/blog/categories/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    
    
    <category term="promise" scheme="https://leaningzzz.github.io/blog/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>2341.数组能形成多少数对</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/16/leetcode/2341-%E6%95%B0%E7%BB%84%E8%83%BD%E5%BD%A2%E6%88%90%E5%A4%9A%E5%B0%91%E6%95%B0%E5%AF%B9/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/16/leetcode/2341-%E6%95%B0%E7%BB%84%E8%83%BD%E5%BD%A2%E6%88%90%E5%A4%9A%E5%B0%91%E6%95%B0%E5%AF%B9/</id>
    <published>2023-02-16T03:10:32.000Z</published>
    <updated>2023-02-16T03:13:53.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.cn/problems/maximum-number-of-pairs-in-array/">https://leetcode.cn/problems/maximum-number-of-pairs-in-array/</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>排序数组</li><li>从0开始遍历，对比[i]和[i+1]是否相等</li><li>如果相等，pairs ++ ,i +&#x3D; 2</li><li>如果不相等，i++</li><li>返回 [pairs, nums.length-2*pairs]</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2341 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2341] 数组能形成多少数对</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfPairs = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sorted = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, pairs = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; sorted.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sorted[i] === sorted[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      pairs++</span><br><span class="line">      i += <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pairs)</span><br><span class="line">  <span class="keyword">return</span> [pairs, sorted.<span class="property">length</span> - pairs * <span class="number">2</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">// const nums = [1, 1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numberOfPairs</span>(nums))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-number-of-pairs-</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>手写call、bind、apply</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/14/interview/%E6%89%8B%E5%86%99call%E3%80%81bind%E3%80%81apply/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/14/interview/%E6%89%8B%E5%86%99call%E3%80%81bind%E3%80%81apply/</id>
    <published>2023-02-14T08:46:50.000Z</published>
    <updated>2023-02-16T03:17:38.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="call、bind、apply的用法"><a href="#call、bind、apply的用法" class="headerlink" title="call、bind、apply的用法"></a>call、bind、apply的用法</h1><ol><li>改变this指向。</li></ol><ul><li>call、apply 改变this后，会执行该方法。</li><li>bind返回改变this后的函数</li></ul><ol start="2"><li>参数不同</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">call</span>(<span class="variable language_">this</span>,...args)</span><br><span class="line"><span class="title function_">apply</span>(<span class="variable language_">this</span>,[args])</span><br><span class="line"><span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br></pre></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol><li>call</li></ol><p>将方法挂载到context上进行调用。<br>调用完成后记录result，并删除context上的挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myCall</span>(<span class="params">context,...args</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(context === <span class="literal">undefined</span> || context === <span class="literal">null</span>)&#123;</span><br><span class="line">    context = <span class="variable language_">window</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> symbol = <span class="title class_">Symbol</span>()</span><br><span class="line">  context[symbol] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">let</span> result = context[symbol](...args)</span><br><span class="line">  <span class="keyword">delete</span> context[symbol]</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>apply<br>与call思路一致</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myApply</span> (context,args)&#123;</span><br><span class="line">  <span class="keyword">if</span>(context === <span class="literal">undefined</span> || context === <span class="literal">null</span>)&#123;</span><br><span class="line">    context = <span class="variable language_">window</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> symbol = <span class="title class_">Symbol</span>()</span><br><span class="line">  context[symbol] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span>  result = context[symbol](...args)</span><br><span class="line">  <span class="keyword">delete</span> context[symbol]</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>bind<br>返回的是一个方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myBind</span> (context,...args)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;call、bind、apply的用法&quot;&gt;&lt;a href=&quot;#call、bind、apply的用法&quot; class=&quot;headerlink&quot; title=&quot;call、bind、apply的用法&quot;&gt;&lt;/a&gt;call、bind、apply的用法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="手写题" scheme="https://leaningzzz.github.io/blog/categories/%E6%89%8B%E5%86%99%E9%A2%98/"/>
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    <category term="面试资料" scheme="https://leaningzzz.github.io/blog/tags/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/"/>
    
    <category term="call" scheme="https://leaningzzz.github.io/blog/tags/call/"/>
    
    <category term="bind" scheme="https://leaningzzz.github.io/blog/tags/bind/"/>
    
    <category term="apply" scheme="https://leaningzzz.github.io/blog/tags/apply/"/>
    
  </entry>
  
  <entry>
    <title>1124.表现良好的最长时间段</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/14/leetcode/1124-%E8%A1%A8%E7%8E%B0%E8%89%AF%E5%A5%BD%E7%9A%84%E6%9C%80%E9%95%BF%E6%97%B6%E9%97%B4%E6%AE%B5/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/14/leetcode/1124-%E8%A1%A8%E7%8E%B0%E8%89%AF%E5%A5%BD%E7%9A%84%E6%9C%80%E9%95%BF%E6%97%B6%E9%97%B4%E6%AE%B5/</id>
    <published>2023-02-14T07:51:38.000Z</published>
    <updated>2023-02-14T08:01:50.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.cn/problems/longest-well-performing-interval/">https://leetcode.cn/problems/longest-well-performing-interval/</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>[9,9,6,0,6,6,9] 转为 [1,1,-1,-1,-1,-1,1]</li><li>求出转化后的数组中最长的合为正的子数组长度</li></ol><p><strong>最后还是用暴力循环求出的解</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=1124 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [1124] 表现良好的最长时间段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">hours</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestWPI = <span class="keyword">function</span> (<span class="params">hours</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (hours.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &lt;= <span class="number">8</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tempArr = hours.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item &lt;= <span class="number">8</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tempArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span>, maxLength = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; tempArr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      temp = temp + tempArr[j]</span><br><span class="line">      <span class="keyword">if</span> (temp &gt; <span class="number">0</span> || (temp &gt; <span class="number">0</span> &amp;&amp; j === tempArr.<span class="property">length</span> - <span class="number">1</span>)) &#123;</span><br><span class="line">        maxLength = <span class="title class_">Math</span>.<span class="title function_">max</span>(j - i, maxLength)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxLength + <span class="number">1</span>, result)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// const hours = [9, 9, 6, 0, 6, 6, 9]</span></span><br><span class="line"><span class="comment">// const hours = [6, 6, 6]</span></span><br><span class="line"><span class="comment">// const hours = [6, 6, 9]</span></span><br><span class="line"><span class="comment">// const hours = [6, 9, 9]</span></span><br><span class="line"><span class="keyword">const</span> hours = [<span class="number">6</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">longestWPI</span>(hours))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/longest-well-performing-</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1234.替换子串得到平衡字符串</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/13/leetcode/1234-%E6%9B%BF%E6%8D%A2%E5%AD%90%E4%B8%B2%E5%BE%97%E5%88%B0%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/13/leetcode/1234-%E6%9B%BF%E6%8D%A2%E5%AD%90%E4%B8%B2%E5%BE%97%E5%88%B0%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-02-13T13:08:27.000Z</published>
    <updated>2023-02-14T07:50:43.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.cn/problems/replace-the-substring-for-balanced-string">https://leetcode.cn/problems/replace-the-substring-for-balanced-string</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=1234 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [1234] 替换子串得到平衡字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> balancedString = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> avg = s.<span class="property">length</span> / <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">let</span> count = &#123;</span><br><span class="line">    <span class="attr">Q</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">W</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">E</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">R</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">checkNum</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 是否超出平均</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> count) &#123;</span><br><span class="line">      <span class="keyword">if</span> (count[key] &gt; avg) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> s) &#123;</span><br><span class="line">    count[char] += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> min = s.<span class="property">length</span>, left = <span class="number">0</span>; right = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (right &lt;= s.<span class="property">length</span> &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;while&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">checkNum</span>()) &#123;</span><br><span class="line">      count[s[right]] -= <span class="number">1</span></span><br><span class="line">      right++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      count[s[left]] += <span class="number">1</span></span><br><span class="line">      min = <span class="title class_">Math</span>.<span class="title function_">min</span>(min, right - left)</span><br><span class="line">      left++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> min</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&quot;QWERQEEE&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">balancedString</span>(s))</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/replace-the-substring-fo</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="滑动窗口" scheme="https://leaningzzz.github.io/blog/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>1138.字母板上的路径</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/12/leetcode/1138-%E5%AD%97%E6%AF%8D%E6%9D%BF%E4%B8%8A%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/12/leetcode/1138-%E5%AD%97%E6%AF%8D%E6%9D%BF%E4%B8%8A%E7%9A%84%E8%B7%AF%E5%BE%84/</id>
    <published>2023-02-12T11:56:01.000Z</published>
    <updated>2023-02-14T07:50:28.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.cn/problems/alphabet-board-path">https://leetcode.cn/problems/alphabet-board-path</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>从第一个字符开始，找到当前字符在board中的<strong>xIndex</strong>和<strong>yIndex</strong></li><li>根据<strong>currentIndex</strong>和当前字符的<strong>xIndex</strong>和<strong>yIndex</strong>，计算该往左右或上下移动</li><li>统计结果</li><li>循环第二个字符</li><li><strong>需要注意z字符的移动，不能超出边界</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=1138 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [1138] 字母板上的路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> alphabetBoardPath = <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> board = [<span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;fghij&quot;</span>, <span class="string">&quot;klmno&quot;</span>, <span class="string">&quot;pqrst&quot;</span>, <span class="string">&quot;uvwxy&quot;</span>, <span class="string">&quot;z&quot;</span>]</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>, curX = <span class="number">0</span>, curY = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; target.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> cur = target[i]</span><br><span class="line">    <span class="keyword">let</span> xIndex, yIndex</span><br><span class="line">    board.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="title function_">includes</span>(cur)) &#123;</span><br><span class="line">        yIndex = index</span><br><span class="line">        xIndex = item.<span class="title function_">indexOf</span>(cur)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> x = xIndex - curX, y = yIndex - curY</span><br><span class="line">    <span class="keyword">const</span> xArr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(x)).<span class="title function_">fill</span>(x &gt; <span class="number">0</span> ? <span class="string">&#x27;R&#x27;</span> : <span class="string">&#x27;L&#x27;</span>), yArr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(y)).<span class="title function_">fill</span>(y &gt; <span class="number">0</span> ? <span class="string">&#x27;D&#x27;</span> : <span class="string">&#x27;U&#x27;</span>)</span><br><span class="line">    <span class="comment">// 需要从其他格子前往z格时，先移动x轴，再移动y轴</span></span><br><span class="line">    <span class="comment">// 先移动y轴的话，有可能撞到边界</span></span><br><span class="line">    <span class="keyword">if</span> (cur === <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">      result += xArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) + yArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result += yArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) + xArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    [curX, curY] = [xIndex, yIndex]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> target = <span class="string">&quot;zb&quot;</span></span><br><span class="line"><span class="comment">// &quot;DDDDD!UUUUURRR!DDDDLLLD!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">alphabetBoardPath</span>(target))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;zb&quot;</span></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// &quot;DDDDD!RUUUUU!&quot;</span></span><br><span class="line"><span class="comment">// 预期结果：</span></span><br><span class="line"><span class="comment">// &quot;DDDDD!UUUUUR!&quot;</span></span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/alphabet-board-path&quot;&gt;htt</summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>html</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/12/basic/html/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/12/basic/html/</id>
    <published>2023-02-11T17:54:53.902Z</published>
    <updated>2023-02-16T03:17:09.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="HTML-DOCTYPE的含义？什么是HTML的标准模式与混杂模式？"><a href="#HTML-DOCTYPE的含义？什么是HTML的标准模式与混杂模式？" class="headerlink" title="HTML DOCTYPE的含义？什么是HTML的标准模式与混杂模式？"></a>HTML DOCTYPE的含义？什么是HTML的标准模式与混杂模式？</h2><p>doctype: 文档类型声明，说明这个页面使用什么来编写的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML5有哪些语义化标签及其特性？HTML元素有哪些分类与特性？"><a href="#HTML5有哪些语义化标签及其特性？HTML元素有哪些分类与特性？" class="headerlink" title="HTML5有哪些语义化标签及其特性？HTML元素有哪些分类与特性？"></a>HTML5有哪些语义化标签及其特性？HTML元素有哪些分类与特性？</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>根据结构化的内容，选择合适的标签。</p><ul><li>有利于seo。</li><li>代码更好的可读性。</li><li>标签上加alt 、title，方便其他设备进行解析。</li></ul><h2 id="如何检测浏览器是否支持HTML5特性？"><a href="#如何检测浏览器是否支持HTML5特性？" class="headerlink" title="如何检测浏览器是否支持HTML5特性？"></a>如何检测浏览器是否支持HTML5特性？</h2><ol><li>检查特定属性和方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!!navigator.<span class="property">geolocation</span> <span class="comment">// 地理位置</span></span><br><span class="line">!!<span class="variable language_">window</span>.<span class="property">localStorage</span></span><br><span class="line">!!<span class="variable language_">window</span>.<span class="property">Worker</span></span><br></pre></td></tr></table></figure><ol><li>创建一个元素，看看特定元素有没有对应的属性和方法。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>).<span class="property">getContext</span></span><br><span class="line">!!<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;video&#x27;</span>).<span class="property">canPlayType</span></span><br></pre></td></tr></table></figure><ol><li>第三方库 <a href="http://modernizr.cn/">http://modernizr.cn/</a></li></ol><h2 id="HTML中meta的作用？"><a href="#HTML中meta的作用？" class="headerlink" title="HTML中meta的作用？"></a>HTML中meta的作用？</h2><h2 id="HTML的标签有哪些可以优化SEO？"><a href="#HTML的标签有哪些可以优化SEO？" class="headerlink" title="HTML的标签有哪些可以优化SEO？"></a>HTML的标签有哪些可以优化SEO？</h2><ol><li><p>保证页面时ssr的</p></li><li><p>meta中的name相关属性。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;aaa@gmail.com&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;xxx xxx system&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;xxx xxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>语义化标签，以一些结构化标签为主。<br> title<br> meta<br> article<br> header<br> aside<br> footer</li></ol><h2 id="DOM和BOM有什么区别？"><a href="#DOM和BOM有什么区别？" class="headerlink" title="DOM和BOM有什么区别？"></a>DOM和BOM有什么区别？</h2><p>javaScript在浏览器环境下一般️由三部分构成。</p><ul><li>ECMAScript 核心，描述了js的语法和基本对象。</li><li>DOM 文档对象模型，document。提供了一些api，可以操作文档。例如：操作页面元素。</li><li>BOM 浏览器对象模型，borwser。提供了一些api，可以操作浏览器。例如：操作路由。</li></ul><h2 id="如何实现移动端适配？"><a href="#如何实现移动端适配？" class="headerlink" title="如何实现移动端适配？"></a>如何实现移动端适配？</h2><ul><li>使用媒体查询，根据不同屏幕尺寸设置不同样式。</li><li>使用百分比、vw&#x2F;vh，避免使用px。</li><li>rem方案。</li></ul><h3 id="1px问题"><a href="#1px问题" class="headerlink" title="1px问题"></a>1px问题</h3><p>先放大 200%，然后 scale(0.5)。</p><h3 id="rem方案"><a href="#rem方案" class="headerlink" title="rem方案"></a>rem方案</h3><p>rem 指 html 的 font-size 大小。</p><h2 id="如何禁用页面中的右键、打印、另存为、复制等功能？"><a href="#如何禁用页面中的右键、打印、另存为、复制等功能？" class="headerlink" title="如何禁用页面中的右键、打印、另存为、复制等功能？"></a>如何禁用页面中的右键、打印、另存为、复制等功能？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.  禁用右键</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">oncontextmenu</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(event.<span class="property">button</span> === <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 禁止复制</span></span><br><span class="line">&lt;body oncopy=<span class="string">&quot;nocopy()&quot;</span> /&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nocopy</span>(<span class="params">evenr</span>)&#123;</span><br><span class="line">    event.<span class="property">returnValue</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 禁用f12</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">event</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span> === <span class="number">123</span>)&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">returnValue</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="href-x3D-”javascript-void-0-”和href-x3D-”-”区别是什么？"><a href="#href-x3D-”javascript-void-0-”和href-x3D-”-”区别是什么？" class="headerlink" title="href&#x3D;”javascript:void(0)”和href&#x3D;”#”区别是什么？"></a>href&#x3D;”javascript:void(0)”和href&#x3D;”#”区别是什么？</h2><p>href&#x3D;”#”: 锚点默认是#top，会让网页往上走<br>javascript: void(0): 死链接。</p><h2 id="对target-x3D-”-blank”的理解？有什么安全性问题？如何防范？"><a href="#对target-x3D-”-blank”的理解？有什么安全性问题？如何防范？" class="headerlink" title="对target&#x3D;”_blank”的理解？有什么安全性问题？如何防范？"></a>对target&#x3D;”_blank”的理解？有什么安全性问题？如何防范？</h2><blockquote><p>当你使用target&#x3D;”_blank”打开一个新的标签页时，新页面的window对象上有一个属性 opener ,它指向的是前一个页面的window对象，因此，后一个新打开的页面就可以控制前一个页面了.</p></blockquote><p>类似与window.open，子页面会拿到当前的句柄。<br>window.opener</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">opener</span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">opener</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;bad.html&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;x.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener noreferer&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简述页面的存储区别？什么是本地存储？怎么做离线缓存？"><a href="#简述页面的存储区别？什么是本地存储？怎么做离线缓存？" class="headerlink" title="简述页面的存储区别？什么是本地存储？怎么做离线缓存？"></a>简述页面的存储区别？什么是本地存储？怎么做离线缓存？</h2><ol><li>cookie<br> 每个cookie不能超过4kb<br> 每个域 20个<br> 比较耗费性能<br> [ key, value, domain, expireTime, httpOnly, sec, ss ]</li><li>web storage<br> localStorage： 永久存储<br> sessionStorage： 会话存储<br> 5MB</li><li>indexdDB<br> 相当于浏览器端的数据库</li><li>application cache<ul><li>pwa</li><li>service worker 离线缓存</li></ul></li></ol><h2 id="什么是canvas？什么时候需要使用canvas？"><a href="#什么是canvas？什么时候需要使用canvas？" class="headerlink" title="什么是canvas？什么时候需要使用canvas？"></a>什么是canvas？什么时候需要使用canvas？</h2><p>画布<br>常见动画方案：</p><ol><li>css</li><li>svg</li><li>canvas</li></ol><h2 id="什么是PWA？"><a href="#什么是PWA？" class="headerlink" title="什么是PWA？"></a>什么是PWA？</h2><p>渐进式网页应用<br>核心技术：</p><ul><li>app mainfest</li><li>service worker</li><li>web push</li></ul><h2 id="什么是Shadow-DOM？"><a href="#什么是Shadow-DOM？" class="headerlink" title="什么是Shadow DOM？"></a>什么是Shadow DOM？</h2><p>web component：真正做到组件化。</p><ul><li>原生规范，无需框架，无需编译。</li><li>真正意义上的css scope。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;shadow-text&#x27;</span>, <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">connectedCallback</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> shadow = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;<span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span>&#125;)</span><br><span class="line">        shadow.<span class="property">innerHtml</span> = <span class="string">&#x27;this is a shadow dom&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="iframe有哪些应用？"><a href="#iframe有哪些应用？" class="headerlink" title="iframe有哪些应用？"></a>iframe有哪些应用？</h2><h2 id="如处理iframe通信？"><a href="#如处理iframe通信？" class="headerlink" title="如处理iframe通信？"></a>如处理iframe通信？</h2><h2 id="什么是web-worker？为什么要使用web-worker"><a href="#什么是web-worker？为什么要使用web-worker" class="headerlink" title="什么是web worker？为什么要使用web worker?"></a>什么是web worker？为什么要使用web worker?</h2><ol><li>web worker赋予了js应用在主线程之外重开一个单独线程的能力，该线程与主线程相分离，互不影响。可通过postMessage、onMessage两个api来进行通信。</li><li>避免耗时操作阻塞主线程（将耗时操作移到worker线程中进行，操作结束后通知主线程）</li></ol><h2 id="什么是SSO打通？怎么做前端沙盒模式？"><a href="#什么是SSO打通？怎么做前端沙盒模式？" class="headerlink" title="什么是SSO打通？怎么做前端沙盒模式？"></a>什么是SSO打通？怎么做前端沙盒模式？</h2><h2 id="浏览器的渲染和布局逻辑是什么？"><a href="#浏览器的渲染和布局逻辑是什么？" class="headerlink" title="浏览器的渲染和布局逻辑是什么？"></a>浏览器的渲染和布局逻辑是什么？</h2><ul><li><p>DOM 树构建</p></li><li><p>CSS 树构建</p></li><li><p>DOM树 + CSS树 &#x3D; 渲染树构建</p></li><li><p>页面布局</p></li><li><p>页面绘制</p></li></ul><h2 id="页面的重绘回流是什么？"><a href="#页面的重绘回流是什么？" class="headerlink" title="页面的重绘回流是什么？"></a>页面的重绘回流是什么？</h2><h2 id="怎样计算首屏和白屏的时间？常统计的页面性能数据指标包括？"><a href="#怎样计算首屏和白屏的时间？常统计的页面性能数据指标包括？" class="headerlink" title="怎样计算首屏和白屏的时间？常统计的页面性能数据指标包括？"></a>怎样计算首屏和白屏的时间？常统计的页面性能数据指标包括？</h2><h2 id="页面上有哪些领域可以做进一步的性能优化？"><a href="#页面上有哪些领域可以做进一步的性能优化？" class="headerlink" title="页面上有哪些领域可以做进一步的性能优化？"></a>页面上有哪些领域可以做进一步的性能优化？</h2><h2 id="浏览器之间的线程调度是怎么做的？"><a href="#浏览器之间的线程调度是怎么做的？" class="headerlink" title="浏览器之间的线程调度是怎么做的？"></a>浏览器之间的线程调度是怎么做的？</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h1&gt;&lt;h2 id=&quot;HTML-DOCTYPE的含义？什么是HTML的标准模式与混杂模式？&quot;&gt;&lt;a href=&quot;#HTML-DOCTYP</summary>
      
    
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/categories/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    <category term="面试资料" scheme="https://leaningzzz.github.io/blog/tags/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/"/>
    
    <category term="html" scheme="https://leaningzzz.github.io/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>异步</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/12/basic/promise/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/12/basic/promise/</id>
    <published>2023-02-11T17:53:41.010Z</published>
    <updated>2023-02-14T08:05:56.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><h3 id="promise实现"><a href="#promise实现" class="headerlink" title="promise实现"></a>promise实现</h3><ol><li>执行resolve -&gt; fulfilled</li><li>执行reject -&gt; rejected</li><li>promise状态改变后不可改变</li><li>如果有报错，相当于执行reject</li><li>初始状态为pending</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化，定义初始状态</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initValue</span>()</span><br><span class="line">    <span class="comment">// 初始化this指向</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initBind</span>()</span><br><span class="line">    <span class="comment">// 执行传入的函数</span></span><br><span class="line">    <span class="comment">// catch 执行reject</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reject</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">initValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">promiseResult</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">promiseState</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCbs</span> = [] <span class="comment">// 成功回调</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCbs</span> = [] <span class="comment">// 失败回调</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">initBind</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this绑定到实例上，方便链式调用？</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolve</span> = <span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reject</span> = <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">promiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">promiseResult</span> = value</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">promiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="comment">// 执行保存的成功过回调 </span></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">onFulfilledCbs</span>.<span class="property">length</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCbs</span>.<span class="title function_">shift</span>()(<span class="variable language_">this</span>.<span class="property">promiseResult</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">promiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">promiseResult</span> = reason</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">promiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">onRejectedCbs</span>.<span class="property">length</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedCbs</span>.<span class="title function_">shift</span>()(<span class="variable language_">this</span>.<span class="property">promiseResult</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">// 参数类型判断</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保证链式调用，返回一个新的promise对象</span></span><br><span class="line">    <span class="keyword">const</span> thenPromise = <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">resolvePromise</span> = (<span class="params">cb</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=======&gt;cb&#x27;</span>, cb)</span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">promiseResult</span>)</span><br><span class="line">          <span class="keyword">if</span> (x &amp;&amp; x === thenPromise) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;不能返回自身&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (x <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">            x.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(x)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(e)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 状态不为pending -&gt; 执行对应状态的回调</span></span><br><span class="line">      <span class="comment">// 状态为pending -&gt; 保存回调，异步结束后执行</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">promiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">resolvePromise</span>(onFulfilled)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">promiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">resolvePromise</span>(onRejected)</span><br><span class="line">        <span class="comment">// onRejected(this.promiseResult)</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">promiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCbs</span>.<span class="title function_">push</span>(resolvePromise.<span class="title function_">bind</span>(<span class="variable language_">this</span>, onFulfilled))</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCbs</span>.<span class="title function_">push</span>(resolvePromise.<span class="title function_">bind</span>(<span class="variable language_">this</span>, onRejected))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> thenPromise</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;========&gt;1&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">res</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;========&gt;2&#x27;</span>)</span><br><span class="line">test.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;====&gt;res&#x27;</span>, res))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;========&gt;3&#x27;</span>, test.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;====&gt;res&#x27;</span>, res)))</span><br></pre></td></tr></table></figure><h3 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h3><ol><li>接收⼀个Promise数组，数组中如有⾮Promise项，则此项当做成功</li><li>如果所有Promise都成功，则返回成功结果数组</li><li>如果有⼀个Promise失败，则返回这个失败结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">index, value</span>) =&gt; &#123;</span><br><span class="line">      result[index] = value</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span> (count === promises.<span class="property">length</span>) <span class="title function_">resolve</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(index, res)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addData</span>(index, promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race"></a>promise.race</h3><ol><li>接收promise数组，如果有非promise的值，返回成功</li><li>返回最快得到结果的promise</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function"><span class="params">promise</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise-allSettled"><a href="#promise-allSettled" class="headerlink" title="promise.allSettled"></a>promise.allSettled</h3><ol><li>接受promise数组，如果有非promise值，返回成功</li><li>保存所有promise结果(成功+失败)，返回数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">allSettled</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">status, value, i</span>) =&gt; &#123;</span><br><span class="line">      res[i] = &#123;</span><br><span class="line">        status,</span><br><span class="line">        value</span><br><span class="line">      &#125;</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(<span class="string">&#x27;fulfilled&#x27;</span>, res, i)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(<span class="string">&#x27;rejected&#x27;</span>, err, i)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addData</span>(<span class="string">&#x27;fulfilled&#x27;</span>, promise, i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise-any"><a href="#promise-any" class="headerlink" title="promise.any"></a>promise.any</h3><ol><li>接收promise数组，若有非promise直接返回成功</li><li>有一个promise成功，返回成功</li><li>全部失败报错</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(val)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          count++</span><br><span class="line">          <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(<span class="string">&#x27;All promises were rejected&#x27;</span></span><br><span class="line">            ))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">res</span>(num * <span class="number">2</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">request</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res1</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">request</span>(<span class="number">2</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res1</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>如果 await 后面跟的不是promise，是没法实现类似异步转同步的效果的，例如await 一个 setTimeout</li></ol><h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异步&quot;&gt;&lt;a href=&quot;#异步&quot; class=&quot;headerlink&quot; title=&quot;异步&quot;&gt;&lt;/a&gt;异步&lt;/h1&gt;&lt;h2 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; class=&quot;headerlink&quot; title=&quot;promise&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/categories/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="promise" scheme="https://leaningzzz.github.io/blog/tags/promise/"/>
    
    <category term="异步" scheme="https://leaningzzz.github.io/blog/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>css</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/12/basic/css/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/12/basic/css/</id>
    <published>2023-02-11T17:18:22.432Z</published>
    <updated>2023-02-16T03:17:05.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="块级元素和行内元素转换的方式有哪些？"><a href="#块级元素和行内元素转换的方式有哪些？" class="headerlink" title="块级元素和行内元素转换的方式有哪些？"></a>块级元素和行内元素转换的方式有哪些？</h3><ol><li>display</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: block / inline-block</span><br></pre></td></tr></table></figure><ol><li>float</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">float</span>: left/right =&gt; display: block  =&gt; 去除行内元素之间的空白问题</span><br></pre></td></tr></table></figure><ol><li>position</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute /fixed</span><br></pre></td></tr></table></figure><h3 id="选择器-amp-优先级"><a href="#选择器-amp-优先级" class="headerlink" title="选择器 &amp; 优先级"></a>选择器 &amp; 优先级</h3><h4 id="选择器的优先级是什么样的？"><a href="#选择器的优先级是什么样的？" class="headerlink" title="选择器的优先级是什么样的？"></a>选择器的优先级是什么样的？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">内联样式        权重最高            1000</span><br><span class="line">id选择器        #id                 100</span><br><span class="line">类选择器        .class              10</span><br><span class="line">属性选择器      a[ref=&#x27;link&#x27;]       10</span><br><span class="line">标签选择器      div                 1</span><br><span class="line">伪类选择器      li:last-child       10</span><br><span class="line">伪元素选择器    li:before           1</span><br><span class="line"></span><br><span class="line">兄弟选择器      div+p               0</span><br><span class="line">子选择器        ul&gt;li               0</span><br><span class="line">后代选择器      li a                0</span><br><span class="line"></span><br><span class="line">通配符          *                   0</span><br></pre></td></tr></table></figure><h4 id="特殊场景优先级如何判断？"><a href="#特殊场景优先级如何判断？" class="headerlink" title="特殊场景优先级如何判断？"></a>特殊场景优先级如何判断？</h4><ul><li>!important 优先级最高</li><li>如果优先级相同，后者高于前者</li><li>继承得到的样式，优先级是最低的</li></ul><h4 id="可继承的样式有哪些？"><a href="#可继承的样式有哪些？" class="headerlink" title="可继承的样式有哪些？"></a>可继承的样式有哪些？</h4><ul><li><p>字体</p><ul><li>font-family</li><li>font-weight</li><li>font-size</li><li>font-style</li></ul></li><li><p>文本</p><ul><li>text-indent 缩进</li><li>text-align</li><li>line-height</li><li>word-spacing</li><li>letter-spacing</li><li>color</li></ul></li><li><p>元素</p><ul><li>visibility</li></ul></li><li><p>列表布局</p><ul><li>list-style</li></ul></li><li><p>光标</p><ul><li>cursor</li></ul></li></ul><h3 id="隐藏和显示相关"><a href="#隐藏和显示相关" class="headerlink" title="隐藏和显示相关"></a>隐藏和显示相关</h3><h4 id="有哪些隐藏元素的方法？有什么区别？"><a href="#有哪些隐藏元素的方法？有什么区别？" class="headerlink" title="有哪些隐藏元素的方法？有什么区别？"></a>有哪些隐藏元素的方法？有什么区别？</h4><ul><li>display:none; 不占位</li><li>visibility: hidden; 占位</li><li>opacity: 0; 占位</li><li>z-index: 负值; 不占位（被覆盖了）</li><li>transform: scale(0, 0); 占位（位置变小了）</li></ul><h4 id="display-和-visibility-有什么区别？"><a href="#display-和-visibility-有什么区别？" class="headerlink" title="display 和 visibility 有什么区别？"></a>display 和 visibility 有什么区别？</h4><ol><li>都可以让元素进行隐藏&#x2F;展示。</li><li>浏览器渲染时，display不占据空间，渲染书中会不存在；visibility 占据一根树枝，只是不进行展示。</li><li>visibility 是可继承，而display不会被继承。</li><li>性能影响上，display会导致文档重排，但是修改visibility只会导致文本重绘。</li></ol><h3 id="盒模型及其特性"><a href="#盒模型及其特性" class="headerlink" title="盒模型及其特性"></a>盒模型及其特性</h3><h4 id="简单说说标准盒模型、IE盒模型分别是什么？如何转换？"><a href="#简单说说标准盒模型、IE盒模型分别是什么？如何转换？" class="headerlink" title="简单说说标准盒模型、IE盒模型分别是什么？如何转换？"></a>简单说说标准盒模型、IE盒模型分别是什么？如何转换？</h4><p>盒模型特点：<br>content + padding + border + margin</p><p>区别：<br>标准盒模型： width 和 height 只包含 content 部分。<br>IE盒模型： width 和 height 包含了 content + padding + border</p><p>转换方式：<br>box-sizing: content-box &#x2F; border-box</p><h4 id="伪元素和伪类是什么？区别是什么？"><a href="#伪元素和伪类是什么？区别是什么？" class="headerlink" title="伪元素和伪类是什么？区别是什么？"></a>伪元素和伪类是什么？区别是什么？</h4><p>伪元素： 只出现在css样式表中，不存在与文档流中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;aa&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪类：在已有的元素上加上特殊的类别，不产生新的类别。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片格式和css-sprites"><a href="#图片格式和css-sprites" class="headerlink" title="图片格式和css-sprites"></a>图片格式和css-sprites</h3><h4 id="图片格式有哪些？怎么应用？如何选择？"><a href="#图片格式有哪些？怎么应用？如何选择？" class="headerlink" title="图片格式有哪些？怎么应用？如何选择？"></a>图片格式有哪些？怎么应用？如何选择？</h4><ul><li>BMP：无损、无压缩。通常体积较大。</li><li>GIF：无损，采用了LZW压缩算法。仅支持8bit索引色，色彩还原度较差，但支持动图。</li><li>JPEG：有损、直接色存储，适合还原度要求较高的场景。</li><li>PNG-8：无损、使用索引色。体积更优秀，并且支持透明度调节。</li><li>PNG-24：无损，使用直接色存储。</li><li>SVG：无损，放大不会失真，适合做logo、icon</li><li>webP：有损+无损、使用直接色、支持透明度、压缩。兼容性不太好。</li></ul><h4 id="css-sprites-精灵图、雪碧图怎么处理？"><a href="#css-sprites-精灵图、雪碧图怎么处理？" class="headerlink" title="css-sprites 精灵图、雪碧图怎么处理？"></a>css-sprites 精灵图、雪碧图怎么处理？</h4><p>把所有涉及到的图片放到一张大图中，利用background-image将一张大图加载到页面中，通过background-repeat + background-position将对应图片移动到窗口中显示。</p><p>优点： 性能<br>缺点： 开发、维护</p><h3 id="像素密度和图片应用"><a href="#像素密度和图片应用" class="headerlink" title="像素密度和图片应用"></a>像素密度和图片应用</h3><h4 id="像素密度有了解吗？"><a href="#像素密度有了解吗？" class="headerlink" title="像素密度有了解吗？"></a>像素密度有了解吗？</h4><p>经典设备宽高 414px <em>896px<br>物理像素 1242px</em> 2688px</p><p>1242 &#x2F; 414 &#x3D; 3</p><p>&#x3D;&gt; 逻辑像素 ： 物理像素 &#x3D; 1 ：3<br>&#x3D;&gt; 像素密度、DPI 3<br>&#x3D;&gt; 3倍屏</p><h4 id="如何在图片的加载上应用动态密度？"><a href="#如何在图片的加载上应用动态密度？" class="headerlink" title="如何在图片的加载上应用动态密度？"></a>如何在图片的加载上应用动态密度？</h4><p>设计师提供 2x 3x 图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">image&#123;</span><br><span class="line">    <span class="attribute">background</span>: (<span class="string">&#x27;1x.png&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">3</span>)&#123;</span><br><span class="line">    image&#123;</span><br><span class="line">        <span class="attribute">background</span>: (<span class="string">&#x27;3x.png&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css工程化与预处理"><a href="#css工程化与预处理" class="headerlink" title="css工程化与预处理"></a>css工程化与预处理</h3><h4 id="css类库与工程化的理解？"><a href="#css类库与工程化的理解？" class="headerlink" title="css类库与工程化的理解？"></a>css类库与工程化的理解？</h4><p>预处理器：less csss stylus<br>&#x3D;&gt; 利用编译库提供能力，提供层级、mixin、变量、循环、函数</p><p>后处理器：postCss<br>&#x3D;&gt; 利用后处理编译，给写好的css增加一些属性或进行变量替换，实现跨浏览器兼容</p><h3 id="单行、多行文本超出"><a href="#单行、多行文本超出" class="headerlink" title="单行、多行文本超出"></a>单行、多行文本超出</h3><h4 id="手写一个单行-amp-多行文本超出省略"><a href="#手写一个单行-amp-多行文本超出省略" class="headerlink" title="手写一个单行 &amp; 多行文本超出省略"></a>手写一个单行 &amp; 多行文本超出省略</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--单行超出--&gt;</span><br><span class="line">style&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;  // 超出省略号</span><br><span class="line">    wite-space: nowrap;  // 不换行</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--多行超出--&gt;</span><br><span class="line">style&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;  // 超出省略号</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box; // 弹性伸缩盒子模型</span><br><span class="line">    -webkit-box-orient: vertical; // 从上往下垂直排列</span><br><span class="line">    -webkit-line-clamp: <span class="number">3</span>; // 显示行数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--兼容性方案--&gt;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;   // 必须知道行高</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--方案不足：必须固定行高 =&gt; js处理 后处理器处理--&gt;</span><br></pre></td></tr></table></figure><h3 id="px-em-rem"><a href="#px-em-rem" class="headerlink" title="px em rem"></a>px em rem</h3><h4 id="多种单位的区别"><a href="#多种单位的区别" class="headerlink" title="多种单位的区别"></a>多种单位的区别</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;h3 id=&quot;块级元素和行内元素转换的方式有哪些？&quot;&gt;&lt;a href=&quot;#块级元素和行内元素转换的方式有哪些？&quot; class=&quot;head</summary>
      
    
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/categories/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="css" scheme="https://leaningzzz.github.io/blog/tags/css/"/>
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    <category term="面试资料" scheme="https://leaningzzz.github.io/blog/tags/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>http</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/12/basic/http/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/12/basic/http/</id>
    <published>2023-02-11T17:18:22.423Z</published>
    <updated>2023-02-22T06:54:34.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是http？什么是https？"><a href="#什么是http？什么是https？" class="headerlink" title="什么是http？什么是https？"></a>什么是http？什么是https？</h1><p>http：基于 tcp&#x2F;id。是一个客户端和服务端请求和响应的标准，用于从 www 服务器传输超文本到本地浏览器的超文本传输协议。</p><p>https：是以安全为目标的 HTTP 通道，通过在 HTTP 下加入 SSL 层进行加密。其作用是 建立一个信息安全通道，来确保数据的传输，确保网站的真实性。</p><h1 id="http-和-https-的区别和优缺点？"><a href="#http-和-https-的区别和优缺点？" class="headerlink" title="http 和 https 的区别和优缺点？"></a>http 和 https 的区别和优缺点？</h1><ul><li>http 是超文本传输协议，信息是明文传输。HTTPS 协议要比 HTTP 协议更加安全，https 是具有安全性的 ssl 加密传输协议，可防止数据在传输过程中被窃取、改变，确保数据的完整性。</li><li>http 协议的默认端口为80，https 的默认端口为 443。</li><li>https 协议需要 ca 证书，费用较高。</li><li>SSL 证书需要绑定 IP。</li></ul><h1 id="https-协议的工作原理？"><a href="#https-协议的工作原理？" class="headerlink" title="https 协议的工作原理？"></a>https 协议的工作原理？</h1><ol><li>客户端使用 https url 访问服务器，则要求 web 服务器建立 ssl 连接。</li><li>web 服务器收到客户端的请求之后，会将网站的证书（包含公钥）传输给客户端。</li><li>客户端和 web 服务器端开始协商 ssl 链接的安全等级（加密等级）。</li><li>客户端、浏览器通过双方协商一致的安全登记，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。</li><li>web 服务器通过自己的私钥解密出会话密钥。</li><li>web 客户端通过会话密钥加密与客户端之间的通信。</li></ol><h1 id="https-一定是安全的吗？"><a href="#https-一定是安全的吗？" class="headerlink" title="https 一定是安全的吗？"></a>https 一定是安全的吗？</h1><p>不一定。中间人攻击。<br>中间人与用户或服务器在同一个局域网，中间人可以截获用户的数据包，包括SSL数据包，并做一个假的服务器SSL证书与用户通信，从而截获用户输入的机密信息。当网站被假的SSL证书替换时，浏览器会警告用户此证书不受信任，需要用户确认是否信任此证书，用户习惯性点击“继续浏览”，中间人攻击轻而易举的实现了。</p><h1 id="什么是三次握手？"><a href="#什么是三次握手？" class="headerlink" title="什么是三次握手？"></a>什么是三次握手？</h1><p>三次握手是客户端与服务器在建立TCP连接时的步骤。在握手的过程中传送的包里不含数据，三次握手完毕后，客户端和服务器才正式开始传送数据。</p><ul><li>第一次握手： 建立连接时，客户端发送syn包（syn&#x3D;j）到服务器，并进入 <em>SYN_SENT</em> 状态，等待服务器确认。</li><li>第二次握手：服务器收到syn包，并确认客户的SYN（ack&#x3D;j+1），同时也发送一个自己的SYN包（syn&#x3D;k），即SYN+ACK包，此时服务器进入<em>SYN_RECV</em>状态。</li><li>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK（ack&#x3D;k+1），此包发送完毕，客户端与服务器进入*ESTABLTSHED（TCP连接成功）*状态，完成三次握手。</li></ul><h1 id="TCP和UDP的区别？"><a href="#TCP和UDP的区别？" class="headerlink" title="TCP和UDP的区别？"></a>TCP和UDP的区别？</h1><ul><li>TCP 是面向连接的，UDP无连接。</li><li>TCP 仅支持单播传输，UDP 提供了单播、多播、广播的功能。</li><li>TCP 可靠，三次握手保证了连接的可靠性。UDP 不可靠，UDP 是无连接的，通信不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。</li><li>UDP 开销小（不需要连接），数据传输效率更高，实时性更好。</li></ul><h1 id="什么是请求跨域？"><a href="#什么是请求跨域？" class="headerlink" title="什么是请求跨域？"></a>什么是请求跨域？</h1><p>跨域指由于浏览器的<em>同源同域</em>策略，不能执行其他网站的脚本。（为了安全）<br>同源策略,是浏览器对 JavaScript 实施的安全限制，只要<em>协议</em>、<em>域名</em>、<em>端口</em>有任何一个不同，都被当作是不同的域。<br>跨域原理，即是通过各种方式，避开浏览器的安全限制。</p><h1 id="怎么解决请求跨域的问题？"><a href="#怎么解决请求跨域的问题？" class="headerlink" title="怎么解决请求跨域的问题？"></a>怎么解决请求跨域的问题？</h1><ul><li>JSONP<br>script标签、image标签中的src属性不受浏览器同源同域策略影响，因此可以利用这个特性，服务端不再返回 JSON 格式的数据，而是返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态创建 script</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 script 的 src 属性，并设置请求地址</span></span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://localhost:3000/?callback=getData&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让 script 生效</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br></pre></td></tr></table></figure><p>缺点：只支持get</p><ul><li><p>CORS<br>CORS(Cross-origin resource sharing)跨域资源共享。服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求</p></li><li><p>proxy代理<br>目前常用方式,通过服务器设置代理。客户端向服务端请求会产生跨域，但服务端向服务端请求不存在跨域。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是http？什么是https？&quot;&gt;&lt;a href=&quot;#什么是http？什么是https？&quot; class=&quot;headerlink&quot; title=&quot;什么是http？什么是https？&quot;&gt;&lt;/a&gt;什么是http？什么是https？&lt;/h1&gt;&lt;p&gt;http：基于 tc</summary>
      
    
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/categories/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="八股文" scheme="https://leaningzzz.github.io/blog/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    <category term="面试资料" scheme="https://leaningzzz.github.io/blog/tags/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/"/>
    
    <category term="http" scheme="https://leaningzzz.github.io/blog/tags/http/"/>
    
    <category term="网络" scheme="https://leaningzzz.github.io/blog/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>2331.计算布尔二叉树的值</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/12/leetcode/2331-%E8%AE%A1%E7%AE%97%E5%B8%83%E5%B0%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%80%BC/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/12/leetcode/2331-%E8%AE%A1%E7%AE%97%E5%B8%83%E5%B0%94%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%80%BC/</id>
    <published>2023-02-11T17:10:58.000Z</published>
    <updated>2023-02-14T07:51:15.128Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2331] 计算布尔二叉树的值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 递归</span></span><br><span class="line"><span class="comment"> * root.val为0或1时，返回对应的false或true</span></span><br><span class="line"><span class="comment"> * root.val为2或3时，递归计算值，并取 || 或 &amp;&amp;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2331 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2331] 计算布尔二叉树的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> evaluateTree = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 0: false</span></span><br><span class="line">  <span class="comment">// 1: true</span></span><br><span class="line">  <span class="comment">// 2: or</span></span><br><span class="line">  <span class="comment">// 3: and</span></span><br><span class="line">  <span class="comment">// root = [2,1,3,null,null,0,1]</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">val</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">val</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">val</span> === <span class="number">2</span>) <span class="keyword">return</span> <span class="title function_">loop</span>(root.<span class="property">left</span>) || <span class="title function_">loop</span>(root.<span class="property">right</span>)</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">val</span> === <span class="number">3</span>) <span class="keyword">return</span> <span class="title function_">loop</span>(root.<span class="property">left</span>) &amp;&amp; <span class="title function_">loop</span>(root.<span class="property">right</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">loop</span>(root)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1797.设计一个验证系统</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/12/leetcode/1797-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%B3%BB%E7%BB%9F/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/12/leetcode/1797-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-02-11T17:10:37.000Z</published>
    <updated>2023-02-14T07:51:11.919Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">timeToLive</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">AuthenticationManager</span> = <span class="keyword">function</span> (<span class="params">timeToLive</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">timeToLive</span> = timeToLive</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tokenMap</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; tokenId </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">currentTime</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">AuthenticationManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">generate</span> = <span class="keyword">function</span> (<span class="params">tokenId, currentTime</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">has</span>(tokenId)) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">set</span>(tokenId, currentTime)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; tokenId </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">currentTime</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">AuthenticationManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">renew</span> = <span class="keyword">function</span> (<span class="params">tokenId, currentTime</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">has</span>(tokenId) &amp;&amp; <span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">get</span>(tokenId) + <span class="variable language_">this</span>.<span class="property">timeToLive</span> &gt; currentTime) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">set</span>(tokenId, currentTime)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">currentTime</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">AuthenticationManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">countUnexpiredTokens</span> = <span class="keyword">function</span> (<span class="params">currentTime</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> nums = <span class="number">0</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value + <span class="variable language_">this</span>.<span class="property">timeToLive</span> &gt; currentTime) &#123;</span><br><span class="line">      nums++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> nums</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your AuthenticationManager object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new AuthenticationManager(timeToLive)</span></span><br><span class="line"><span class="comment"> * obj.generate(tokenId,currentTime)</span></span><br><span class="line"><span class="comment"> * obj.renew(tokenId,currentTime)</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.countUnexpiredTokens(currentTime)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthenticationManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">timeToLive</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timeToLive</span> = timeToLive</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tokenMap</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">generate</span>(<span class="params">tokenId, currentTime</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">has</span>(tokenId)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">set</span>(tokenId, currentTime)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">renew</span>(<span class="params">tokenId, currentTime</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">has</span>(tokenId) &amp;&amp; <span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">get</span>(tokenId) + <span class="variable language_">this</span>.<span class="property">timeToLive</span> &gt; currentTime) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">set</span>(tokenId, currentTime)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">countUnexpiredTokens</span>(<span class="params">currentTime</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> nums = <span class="number">0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tokenMap</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value + <span class="variable language_">this</span>.<span class="property">timeToLive</span> &gt; currentTime) &#123;</span><br><span class="line">        nums++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const authenticationManager = new AuthenticationManager(5)</span></span><br><span class="line"><span class="comment">// authenticationManager.renew(&quot;aaa&quot;, 1)</span></span><br><span class="line"><span class="comment">// authenticationManager.generate(&quot;aaa&quot;, 2)</span></span><br><span class="line"><span class="comment">// authenticationManager.countUnexpiredTokens(6)</span></span><br><span class="line"><span class="comment">// authenticationManager.generate(&quot;bbb&quot;, 7)</span></span><br><span class="line"><span class="comment">// authenticationManager.renew(&quot;aaa&quot;, 8)</span></span><br><span class="line"><span class="comment">// authenticationManager.renew(&quot;bbb&quot;, 10)</span></span><br><span class="line"><span class="comment">// authenticationManager.countUnexpiredTokens(15)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1604.警告一小时内使用相同员工卡大于等于三次的人</title>
    <link href="https://leaningzzz.github.io/blog/2023/02/12/leetcode/1604-%E8%AD%A6%E5%91%8A%E4%B8%80%E5%B0%8F%E6%97%B6%E5%86%85%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%90%8C%E5%91%98%E5%B7%A5%E5%8D%A1%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E4%B8%89%E6%AC%A1%E7%9A%84%E4%BA%BA/"/>
    <id>https://leaningzzz.github.io/blog/2023/02/12/leetcode/1604-%E8%AD%A6%E5%91%8A%E4%B8%80%E5%B0%8F%E6%97%B6%E5%86%85%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%90%8C%E5%91%98%E5%B7%A5%E5%8D%A1%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E4%B8%89%E6%AC%A1%E7%9A%84%E4%BA%BA/</id>
    <published>2023-02-11T17:10:14.000Z</published>
    <updated>2023-02-14T07:51:09.656Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [1604] 警告一小时内使用相同员工卡大于等于三次的人</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 1. 输入数据格式化，转换成key value形式</span></span><br><span class="line"><span class="comment"> * 2. 对每个成员的打卡数据进行分析</span></span><br><span class="line"><span class="comment"> *    2.1 打卡数据转为分钟数</span></span><br><span class="line"><span class="comment"> *    2.2 排序</span></span><br><span class="line"><span class="comment"> *    2.3 从第二个数据开始(i=2)，如果 times[i] - times[i=2] &gt;=60，符合条件，否则i++</span></span><br><span class="line"><span class="comment"> *    2.4 如果存在符合条件的打卡数据，则为true，否则为false</span></span><br><span class="line"><span class="comment"> * 3. 将所有true的成员进行排序</span></span><br><span class="line"><span class="comment"> * 4. 输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=1604 lang=javascript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [1604] 警告一小时内使用相同员工卡大于等于三次的人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">keyName</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">keyTime</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">keyName</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">keyTime</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> alertNames = <span class="keyword">function</span> (<span class="params">keyName, keyTime</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keyName.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = keyName[i]</span><br><span class="line">    <span class="keyword">if</span> (!obj[name]) &#123;</span><br><span class="line">      obj[name] = []</span><br><span class="line">    &#125;</span><br><span class="line">    obj[name].<span class="title function_">push</span>(keyTime[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">timeToMin</span> = (<span class="params">time</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [hour, min] = time.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(hour * <span class="number">60</span>) + <span class="title class_">Number</span>(min)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">check</span> = (<span class="params">times</span>) =&gt; &#123;</span><br><span class="line">    times = times.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">timeToMin</span>(item)).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; times.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (times[i] - times[i - <span class="number">2</span>] &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">check</span>(obj[item])).<span class="title function_">sort</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">alertNames</span>([<span class="string">&quot;daniel&quot;</span>, <span class="string">&quot;daniel&quot;</span>, <span class="string">&quot;daniel&quot;</span>, <span class="string">&quot;luis&quot;</span>, <span class="string">&quot;luis&quot;</span>, <span class="string">&quot;luis&quot;</span>, <span class="string">&quot;luis&quot;</span>], [<span class="string">&quot;10:00&quot;</span>, <span class="string">&quot;10:40&quot;</span>, <span class="string">&quot;11:00&quot;</span>, <span class="string">&quot;09:00&quot;</span>, <span class="string">&quot;11:00&quot;</span>, <span class="string">&quot;13:00&quot;</span>, <span class="string">&quot;15:00&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">// // @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="leetcode" scheme="https://leaningzzz.github.io/blog/categories/leetcode/"/>
    
    
    <category term="每日一题" scheme="https://leaningzzz.github.io/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
</feed>
